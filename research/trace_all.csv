files,type,name,line,lines
"{'language': 'python', 'functions': ['query'], 'classes': ['PackageDto', 'GetNextPackage'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'typing'], 'calls': [], 'call_map': {'query': []}}",function,query,,
"{'language': 'python', 'functions': ['get'], 'classes': ['AddressRepository'], 'interfaces': [], 'imports': ['abc', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [], 'call_map': {'get': []}}",function,get,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",function,facade,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",function,configure,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",function,__init__,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",function,__call__,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",function,get_pending_payments,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",function,start_new_payment,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",function,charge,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",function,capture,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",function,from_row,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",function,start_new_payment,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",function,get_pending_payments,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",function,get_payment,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",function,get_payment_charge_id,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",function,update_payment,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",function,charge,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",function,capture,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",function,_execute_request,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",function,_get_iso_code_and_amount,,
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",function,to_params,,
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",function,url,,
"{'language': 'python', 'functions': ['from_dict'], 'classes': ['Response', 'ChargeResponse', 'CaptureResponse'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['fields', 8], ['cls', 10]], 'call_map': {'from_dict': [], 'fields': [8], 'cls': [10]}}",function,from_dict,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,sqlalchemy_connect_url,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,event_bus,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,setup_teardown_tables,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,facade,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,inserted_payment,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,get_payment,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,test_adding_new_payment_is_reflected_on_pending_payments_list,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,test_pending_payments_returns_only_new_payments,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,test_successful_charge_updates_status,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,test_unsuccessful_charge,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",function,test_capture,,
"{'language': 'python', 'functions': ['pytest_addoption'], 'classes': [], 'interfaces': [], 'imports': ['_pytest.config.argparsing'], 'calls': [], 'call_map': {'pytest_addoption': []}}",function,pytest_addoption,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",function,api_key,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",function,api_consumer,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",function,source,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",function,test_charge_then_capture,,
"{'language': 'python', 'functions': ['async_handler_generic_task'], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy.engine', 'main', 'main.modules'], 'calls': [['bootstrap_app', 13], ['instance', 20]], 'call_map': {'async_handler_generic_task': [], 'bootstrap_app': [13], 'instance': [20]}}",function,async_handler_generic_task,,
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",function,__enter__,,
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",function,__exit__,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",function,bootstrap_app,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",function,_setup_dependency_injection,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",function,_setup_orm_events,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",function,insert_cb,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",function,update_cb,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",function,_create_db_schema,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,configure,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,enter,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,exit,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,__enter__,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,__exit__,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,get,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,__init__,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,connection,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,session,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,__init__,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,configure,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,lock,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,create_lock,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,queue,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,run_async_handler,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,enqueue_after_commit,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,event_bus,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,__init__,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,customer_relationship_config,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",function,payments_config,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,_record_event,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,domain_events,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,clear_events,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,get,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,get,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,post,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",function,post,,
"{'language': 'python', 'functions': ['method_dispatch', 'wrapper'], 'classes': [], 'interfaces': [], 'imports': ['functools', 'typing'], 'calls': [], 'call_map': {'method_dispatch': [], 'wrapper': []}}",function,method_dispatch,,
"{'language': 'python', 'functions': ['method_dispatch', 'wrapper'], 'classes': [], 'interfaces': [], 'imports': ['functools', 'typing'], 'calls': [], 'call_map': {'method_dispatch': [], 'wrapper': []}}",function,wrapper,,
"{'language': 'python', 'functions': ['__enter__', '__exit__'], 'classes': ['AlreadyLocked', 'Lock'], 'interfaces': [], 'imports': ['types', 'typing', 'typing_extensions'], 'calls': [], 'call_map': {'__enter__': [], '__exit__': []}}",function,__enter__,,
"{'language': 'python', 'functions': ['__enter__', '__exit__'], 'classes': ['AlreadyLocked', 'Lock'], 'interfaces': [], 'imports': ['types', 'typing', 'typing_extensions'], 'calls': [], 'call_map': {'__enter__': [], '__exit__': []}}",function,__exit__,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",function,_extract_type_if_optional,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",function,_deserialize_dt,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",function,from_json,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",function,to_json,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",function,currency,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",function,amount,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",function,__eq__,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",function,__lt__,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",function,__add__,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",function,__sub__,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",function,__repr__,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",function,__str__,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",function,__hash__,,
"{'language': 'python', 'functions': ['get_dollars'], 'classes': [], 'interfaces': [], 'imports': ['decimal', 'typing', 'foundation.value_objects'], 'calls': [['Money', 8]], 'call_map': {'get_dollars': [], 'Money': [8]}}",function,get_dollars,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",function,test_invalid_inputs,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",function,test_valid_inputs,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",function,test_repr,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",function,test_str,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",function,test_equality,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",function,test_lt_the_same_currency,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",function,test_lt_different_currency,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",function,test_supports_different_comparison_operators,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",function,test_supports_basic_math_operators_if_the_same_currency,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",function,test_normalizes_whenever_it_can,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",function,get,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",function,save,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",function,__call__,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",function,get_paying_for_won_item,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",function,get_data_repo,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",function,configure,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",function,mocked_uuid4,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",function,payments_facade_mock,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",function,customer_relationship_mock,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",function,pm_data,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",function,process_manager,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",function,test_should_start_new_payment_upon_auction_ended,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",function,pm_data_waiting_for_payment,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",function,test_should_send_success_email_after_payment,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",function,test_should_timeout,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",function,sqlalchemy_connect_url,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",function,setup_teardown_tables,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",function,repo,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",function,test_saving_and_reading,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",function,__call__,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",function,handle_payment_captured,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",function,handle_beginning,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",function,_run_process_manager,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",function,timeout,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",function,handle,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",function,handle_auction_ended,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",function,handle_payment_captured,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",function,facade,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",function,configure,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",function,__init__,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",function,__call__,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",function,__init__,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",function,__call__,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",function,create_customer,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",function,update_customer,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",function,send_email_about_overbid,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",function,send_email_about_winning,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",function,send_email_after_successful_payment,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",function,_get_customer,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",function,_send,,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",function,send,,
"{'language': 'python', 'functions': ['formatted_from'], 'classes': ['CustomerRelationshipConfig'], 'interfaces': [], 'imports': ['dataclasses', 'typing'], 'calls': [['dataclass', 5]], 'call_map': {'dataclass': [5], 'formatted_from': []}}",function,formatted_from,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,title,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,html,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,text,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,title,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,text,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,html,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,title,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,text,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,html,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,title,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,text,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",function,html,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",function,get_active_auctions,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",function,get_single_auction,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",function,auctions_repo,,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",function,ends_at,,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",function,past_date,,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",function,event_bus_mock,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,sqlalchemy_connect_url,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,setup_teardown_tables,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,winning_bid_amount,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,bidder_id,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,another_bidder_id,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,expired_auction,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,auction_model_with_a_bid,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,bid_model,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,test_gets_existing_auction,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,test_saves_auction_changes,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,test_removes_withdrawn_bids,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,__init__,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,post,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,event_bus_stub,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",function,test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents,,
"{'language': 'python', 'functions': ['__init__'], 'classes': ['SqlQuery'], 'interfaces': [], 'imports': ['sqlalchemy.engine'], 'calls': [], 'call_map': {'__init__': []}}",function,__init__,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",function,query,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",function,query,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",function,_row_to_dto,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",function,get,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",function,_row_to_entity,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",function,save,,
"{'language': 'python', 'functions': ['address_repo'], 'classes': ['ShippingInfrastructure'], 'interfaces': [], 'imports': ['injector', 'shipping', 'shipping_infrastructure.models', 'shipping_infrastructure.repositories'], 'calls': [['FakeAddressRepository', 25]], 'call_map': {'address_repo': [], 'FakeAddressRepository': [25]}}",function,address_repo,,
"{'language': 'python', 'functions': ['get'], 'classes': ['FakeAddressRepository'], 'interfaces': [], 'imports': ['uuid', 'faker', 'shipping', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [['Address', 13]], 'call_map': {'get': [], 'Address': [13]}}",function,get,,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",function,load_dialect_impl,,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",function,process_bind_param,,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",function,process_result_value,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",function,placing_bid_uc,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",function,withdrawing_bids_uc,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",function,ending_auction_uc,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",function,beginning_auction_uc,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,place_bid,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,_should_end,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,current_price,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,winners,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,_highest_bid,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,withdraw_bids,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,withdrawn_bids_ids,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,end_auction,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,create,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,__str__,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",function,__eq__,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,present,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,output_boundary,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,auction,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,auction_id,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,auction_title,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,event_bus,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,auctions_repo,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,place_bid_uc,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,beginning_auction_uc,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,test_Auction_FirstBidHigherThanIntialPrice_IsWinning,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,test_Auction_BidLowerThanCurrentPrice_IsLosing,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,test_Auction_Overbid_IsWinning,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,test_Auction_OverbidByWinner_IsWinning,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,test_Auction_FirstBid_EmitsEvent,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,test_Auction_OverbidFromOtherBidder_EmitsEvents,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,test_Auction_OverbidFromOtherBidder_EmitsEvent,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",function,test_PlacingBid_BiddingOnEndedAuction_RaisesException,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",function,event_bus_mock,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",function,repo,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",function,beginning_auction_uc,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",function,test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",function,test_BeginningAuction_EndsAtInThePast_raisesException,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",function,get,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",function,save,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,yesterday,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_use_starting_price_as_current_price_for_empty_bids_list,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_return_highest_bid_for_current_price,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_return_no_winners_for_empty_bids_list,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_return_highest_bids_user_id_for_winners_list,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_win_auction_if_is_the_only_bidder_above_starting_price,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_not_be_winning_auction_if_bids_below_starting_price,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_withdraw_the_only_bid,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_add_withdrawn_bids_ids_to_separate_list,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_not_be_winning_if_bid_lower_than_current_price,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_not_allow_placing_bids_for_ended_auction,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_emit_event_upon_overbid,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_emit_winning_event_if_the_first_offer,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_emit_winning_if_overbids,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_emit_auction_ended,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_emit_event_with_none_winner_if_no_winners,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_should_raise_if_auction_has_not_been_ended,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_EndedAuction_PlacingBid_RaisesException,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",function,test_EndedAuction_Ending_RaisesException,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",function,bidder_id,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",function,amount,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",function,input_dto,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",function,test_loads_auction_using_id,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",function,test_makes_an_expected_bid,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",function,test_saves_auction,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",function,test_presents_output_dto,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",function,exemplary_bids_ids,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",function,input_dto,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",function,test_loads_auction_using_id,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",function,test_saves_auction_afterwards,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",function,test_calls_withdraw_bids_on_auction,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",function,exemplary_bids_ids,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",function,auction,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",function,auctions_repo_mock,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",function,placing_bid_output_boundary_mock,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",function,placing_bid_uc,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",function,withdrawing_bids_uc,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",function,execute,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['EndingAuctionInputDto', 'EndingAuction'], 'interfaces': [], 'imports': ['dataclasses', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['EndingAuctionInputDto', 'EndingAuction'], 'interfaces': [], 'imports': ['dataclasses', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",function,execute,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",function,__init__,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",function,execute,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",function,present,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",function,__init__,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",function,execute,,
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",function,query,,
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",function,query,,
"{'language': 'python', 'functions': ['get', 'save'], 'classes': ['AuctionsRepository'], 'interfaces': [], 'imports': ['abc', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'get': [], 'save': []}}",function,get,,
"{'language': 'python', 'functions': ['get', 'save'], 'classes': ['AuctionsRepository'], 'interfaces': [], 'imports': ['abc', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'get': [], 'save': []}}",function,save,,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",function,default,,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",function,serialize_auction_dto,,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",function,serialize_money,,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",function,serialize_datetime,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",function,get_user,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",function,find_user,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",function,put,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",function,delete,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",function,commit,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",function,find_role,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",function,session,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",function,setup,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",function,create_app,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",function,transaction_start,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",function,transaction_commit,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",function,add_cors_headers,,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",function,get_dto,,
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",function,_serialize,,
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",function,_deserialize,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",function,test_register_returns_details_with_auth_token,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",function,test_register_creates_customer,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",function,assert_customer_with_given_email_exists,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",function,registered_user,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",function,test_login,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",function,example_auction,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",function,test_return_single_auction,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",function,test_returns_list_of_auctions,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",function,logged_in_client,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",function,test_places_bid,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",function,config_path,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",function,app,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",function,container,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",function,client,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",function,connection,,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",function,get_next_package,,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",function,ship_package,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",function,placing_bid_output_boundary,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",function,auctions_list,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",function,single_auction,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",function,place_bid,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",function,present,,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",class,RolesUsers,,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",class,Role,,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",class,User,,
"{'language': 'python', 'functions': [], 'classes': ['Shipping'], 'interfaces': [], 'imports': ['injector', 'shipping.application.queries', 'shipping.application.repositories', 'shipping.application.use_cases'], 'calls': [], 'call_map': {}}",class,Shipping,,
"{'language': 'python', 'functions': [], 'classes': ['PackageAlreadyShipped'], 'interfaces': [], 'imports': [], 'calls': [], 'call_map': {}}",class,PackageAlreadyShipped,,
"{'language': 'python', 'functions': [], 'classes': ['PackageStatus'], 'interfaces': [], 'imports': ['enum'], 'calls': [], 'call_map': {}}",class,PackageStatus,,
"{'language': 'python', 'functions': [], 'classes': ['Address'], 'interfaces': [], 'imports': ['dataclasses', 'uuid'], 'calls': [], 'call_map': {}}",class,Address,,
"{'language': 'python', 'functions': [], 'classes': ['ShippingPackageInputDto', 'ShippingPackage'], 'interfaces': [], 'imports': ['dataclasses', 'uuid'], 'calls': [], 'call_map': {}}",class,ShippingPackageInputDto,,
"{'language': 'python', 'functions': [], 'classes': ['ShippingPackageInputDto', 'ShippingPackage'], 'interfaces': [], 'imports': ['dataclasses', 'uuid'], 'calls': [], 'call_map': {}}",class,ShippingPackage,,
"{'language': 'python', 'functions': ['query'], 'classes': ['PackageDto', 'GetNextPackage'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'typing'], 'calls': [], 'call_map': {'query': []}}",class,PackageDto,,
"{'language': 'python', 'functions': ['query'], 'classes': ['PackageDto', 'GetNextPackage'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'typing'], 'calls': [], 'call_map': {'query': []}}",class,GetNextPackage,,
"{'language': 'python', 'functions': ['get'], 'classes': ['AddressRepository'], 'interfaces': [], 'imports': ['abc', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [], 'call_map': {'get': []}}",class,AddressRepository,,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",class,PaymentStarted,,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",class,PaymentCharged,,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",class,PaymentCaptured,,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",class,PaymentFailed,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",class,Payments,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",class,PaymentChargedHandler,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",class,PaymentsFacade,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",class,PaymentStatus,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",class,PaymentDto,,
"{'language': 'python', 'functions': [], 'classes': ['PaymentsConfig'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['dataclass', 4]], 'call_map': {'dataclass': [4]}}",class,PaymentsConfig,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",class,ApiConsumer,,
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",class,Request,,
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",class,ChargeRequest,,
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",class,CaptureRequest,,
"{'language': 'python', 'functions': ['from_dict'], 'classes': ['Response', 'ChargeResponse', 'CaptureResponse'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['fields', 8], ['cls', 10]], 'call_map': {'from_dict': [], 'fields': [8], 'cls': [10]}}",class,Response,,
"{'language': 'python', 'functions': ['from_dict'], 'classes': ['Response', 'ChargeResponse', 'CaptureResponse'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['fields', 8], ['cls', 10]], 'call_map': {'from_dict': [], 'fields': [8], 'cls': [10]}}",class,ChargeResponse,,
"{'language': 'python', 'functions': ['from_dict'], 'classes': ['Response', 'ChargeResponse', 'CaptureResponse'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['fields', 8], ['cls', 10]], 'call_map': {'from_dict': [], 'fields': [8], 'cls': [10]}}",class,CaptureResponse,,
"{'language': 'python', 'functions': [], 'classes': ['PaymentFailedError'], 'interfaces': [], 'imports': [], 'calls': [], 'call_map': {}}",class,PaymentFailedError,,
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",class,RedisLock,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",class,AppContext,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",class,RequestScope,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",class,Db,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",class,RedisMod,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",class,Rq,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",class,EventBusMod,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",class,Configs,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",class,Event,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",class,EventMixin,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",class,Handler,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",class,AsyncHandler,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",class,EventHandlerProvider,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",class,AsyncEventHandlerProvider,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",class,EventBus,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",class,InjectorEventBus,,
"{'language': 'python', 'functions': ['__enter__', '__exit__'], 'classes': ['AlreadyLocked', 'Lock'], 'interfaces': [], 'imports': ['types', 'typing', 'typing_extensions'], 'calls': [], 'call_map': {'__enter__': [], '__exit__': []}}",class,AlreadyLocked,,
"{'language': 'python', 'functions': ['__enter__', '__exit__'], 'classes': ['AlreadyLocked', 'Lock'], 'interfaces': [], 'imports': ['types', 'typing', 'typing_extensions'], 'calls': [], 'call_map': {'__enter__': [], '__exit__': []}}",class,Lock,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",class,Dataclass,,
"{'language': 'python', 'functions': [], 'classes': ['Currency', 'USD'], 'interfaces': [], 'imports': [], 'calls': [], 'call_map': {}}",class,Currency,,
"{'language': 'python', 'functions': [], 'classes': ['Currency', 'USD'], 'interfaces': [], 'imports': [], 'calls': [], 'call_map': {}}",class,USD,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",class,Money,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",class,BTC,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",class,ProcessManagerDataRepo,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",class,Handler,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",class,ProcessManager,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",class,Processes,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",class,PayingForWonItemHandler,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",class,State,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",class,PayingForWonItemData,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",class,PayingForWonItem,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",class,CustomerRelationship,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",class,BidderHasBeenOverbidHandler,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",class,WinningBidPlacedHandler,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",class,CustomerRelationshipFacade,,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",class,EmailSender,,
"{'language': 'python', 'functions': ['formatted_from'], 'classes': ['CustomerRelationshipConfig'], 'interfaces': [], 'imports': ['dataclasses', 'typing'], 'calls': [['dataclass', 5]], 'call_map': {'dataclass': [5], 'formatted_from': []}}",class,CustomerRelationshipConfig,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",class,Email,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",class,Overbid,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",class,Winning,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",class,PaymentSuccessful,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",class,AuctionsInfrastructure,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",class,EventBusStub,,
"{'language': 'python', 'functions': ['__init__'], 'classes': ['SqlQuery'], 'interfaces': [], 'imports': ['sqlalchemy.engine'], 'calls': [], 'call_map': {'__init__': []}}",class,SqlQuery,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",class,SqlGetActiveAuctions,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",class,SqlGetSingleAuction,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",class,SqlAlchemyAuctionsRepo,,
"{'language': 'python', 'functions': ['address_repo'], 'classes': ['ShippingInfrastructure'], 'interfaces': [], 'imports': ['injector', 'shipping', 'shipping_infrastructure.models', 'shipping_infrastructure.repositories'], 'calls': [['FakeAddressRepository', 25]], 'call_map': {'address_repo': [], 'FakeAddressRepository': [25]}}",class,ShippingInfrastructure,,
"{'language': 'python', 'functions': ['get'], 'classes': ['FakeAddressRepository'], 'interfaces': [], 'imports': ['uuid', 'faker', 'shipping', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [['Address', 13]], 'call_map': {'get': [], 'Address': [13]}}",class,FakeAddressRepository,,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",class,GUID,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",class,Auctions,,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",class,BidderHasBeenOverbid,,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",class,WinningBidPlaced,,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",class,AuctionEnded,,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",class,AuctionBegan,,
"{'language': 'python', 'functions': [], 'classes': ['BidOnEndedAuction', 'AuctionHasNotEnded', 'AuctionAlreadyEnded', 'AuctionEndingInThePast'], 'interfaces': [], 'imports': [], 'calls': [], 'call_map': {}}",class,BidOnEndedAuction,,
"{'language': 'python', 'functions': [], 'classes': ['BidOnEndedAuction', 'AuctionHasNotEnded', 'AuctionAlreadyEnded', 'AuctionEndingInThePast'], 'interfaces': [], 'imports': [], 'calls': [], 'call_map': {}}",class,AuctionHasNotEnded,,
"{'language': 'python', 'functions': [], 'classes': ['BidOnEndedAuction', 'AuctionHasNotEnded', 'AuctionAlreadyEnded', 'AuctionEndingInThePast'], 'interfaces': [], 'imports': [], 'calls': [], 'call_map': {}}",class,AuctionAlreadyEnded,,
"{'language': 'python', 'functions': [], 'classes': ['BidOnEndedAuction', 'AuctionHasNotEnded', 'AuctionAlreadyEnded', 'AuctionEndingInThePast'], 'interfaces': [], 'imports': [], 'calls': [], 'call_map': {}}",class,AuctionEndingInThePast,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",class,Auction,,
"{'language': 'python', 'functions': [], 'classes': ['Bid'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 9]], 'call_map': {'dataclass': [9]}}",class,Bid,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",class,PlacingBidOutputBoundaryFake,,
"{'language': 'python', 'functions': [], 'classes': ['AuctionFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'foundation.value_objects.factories', 'auctions.domain.entities'], 'calls': [['get_dollars', 15]], 'call_map': {'get_dollars': [15]}}",class,AuctionFactory,,
"{'language': 'python', 'functions': [], 'classes': ['AuctionFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'foundation.value_objects.factories', 'auctions.domain.entities'], 'calls': [['get_dollars', 15]], 'call_map': {'get_dollars': [15]}}",class,Meta,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",class,InMemoryAuctionsRepo,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",class,BeginningAuctionInputDto,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",class,BeginningAuction,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['EndingAuctionInputDto', 'EndingAuction'], 'interfaces': [], 'imports': ['dataclasses', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",class,EndingAuctionInputDto,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['EndingAuctionInputDto', 'EndingAuction'], 'interfaces': [], 'imports': ['dataclasses', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",class,EndingAuction,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",class,WithdrawingBidsInputDto,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",class,WithdrawingBids,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",class,PlacingBidInputDto,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",class,PlacingBidOutputDto,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",class,PlacingBidOutputBoundary,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",class,PlacingBid,,
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",class,AuctionDto,,
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",class,GetSingleAuction,,
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",class,GetActiveAuctions,,
"{'language': 'python', 'functions': ['get', 'save'], 'classes': ['AuctionsRepository'], 'interfaces': [], 'imports': ['abc', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'get': [], 'save': []}}",class,AuctionsRepository,,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",class,JSONEncoder,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",class,SaUserDatastore,,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",class,BaseSchema,,
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",class,Dollars,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",class,RegisteredUser,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",class,BeginningAuctionInputDtoFactory,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",class,Meta,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",class,AuctionsWeb,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",class,PlacingBidPresenter,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",import,flask_security,,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",import,sqlalchemy,,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",import,sqlalchemy.orm,,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",import,db_infrastructure,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': [], 'classes': ['Shipping'], 'interfaces': [], 'imports': ['injector', 'shipping.application.queries', 'shipping.application.repositories', 'shipping.application.use_cases'], 'calls': [], 'call_map': {}}",import,injector,,
"{'language': 'python', 'functions': [], 'classes': ['Shipping'], 'interfaces': [], 'imports': ['injector', 'shipping.application.queries', 'shipping.application.repositories', 'shipping.application.use_cases'], 'calls': [], 'call_map': {}}",import,shipping.application.queries,,
"{'language': 'python', 'functions': [], 'classes': ['Shipping'], 'interfaces': [], 'imports': ['injector', 'shipping.application.queries', 'shipping.application.repositories', 'shipping.application.use_cases'], 'calls': [], 'call_map': {}}",import,shipping.application.repositories,,
"{'language': 'python', 'functions': [], 'classes': ['Shipping'], 'interfaces': [], 'imports': ['injector', 'shipping.application.queries', 'shipping.application.repositories', 'shipping.application.use_cases'], 'calls': [], 'call_map': {}}",import,shipping.application.use_cases,,
"{'language': 'python', 'functions': [], 'classes': ['PackageStatus'], 'interfaces': [], 'imports': ['enum'], 'calls': [], 'call_map': {}}",import,enum,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['shipping.domain.value_objects.package_status'], 'calls': [], 'call_map': {}}",import,shipping.domain.value_objects.package_status,,
"{'language': 'python', 'functions': [], 'classes': ['Address'], 'interfaces': [], 'imports': ['dataclasses', 'uuid'], 'calls': [], 'call_map': {}}",import,dataclasses,,
"{'language': 'python', 'functions': [], 'classes': ['Address'], 'interfaces': [], 'imports': ['dataclasses', 'uuid'], 'calls': [], 'call_map': {}}",import,uuid,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['shipping.domain.entities.address'], 'calls': [], 'call_map': {}}",import,shipping.domain.entities.address,,
"{'language': 'python', 'functions': [], 'classes': ['ShippingPackageInputDto', 'ShippingPackage'], 'interfaces': [], 'imports': ['dataclasses', 'uuid'], 'calls': [], 'call_map': {}}",import,dataclasses,,
"{'language': 'python', 'functions': [], 'classes': ['ShippingPackageInputDto', 'ShippingPackage'], 'interfaces': [], 'imports': ['dataclasses', 'uuid'], 'calls': [], 'call_map': {}}",import,uuid,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['shipping.application.use_cases.shipping_package'], 'calls': [], 'call_map': {}}",import,shipping.application.use_cases.shipping_package,,
"{'language': 'python', 'functions': ['query'], 'classes': ['PackageDto', 'GetNextPackage'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'typing'], 'calls': [], 'call_map': {'query': []}}",import,abc,,
"{'language': 'python', 'functions': ['query'], 'classes': ['PackageDto', 'GetNextPackage'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'typing'], 'calls': [], 'call_map': {'query': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['query'], 'classes': ['PackageDto', 'GetNextPackage'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'typing'], 'calls': [], 'call_map': {'query': []}}",import,typing,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['shipping.application.queries.package'], 'calls': [], 'call_map': {}}",import,shipping.application.queries.package,,
"{'language': 'python', 'functions': ['get'], 'classes': ['AddressRepository'], 'interfaces': [], 'imports': ['abc', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [], 'call_map': {'get': []}}",import,abc,,
"{'language': 'python', 'functions': ['get'], 'classes': ['AddressRepository'], 'interfaces': [], 'imports': ['abc', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [], 'call_map': {'get': []}}",import,shipping.domain.entities,,
"{'language': 'python', 'functions': ['get'], 'classes': ['AddressRepository'], 'interfaces': [], 'imports': ['abc', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [], 'call_map': {'get': []}}",import,shipping.domain.value_objects,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['shipping.application.repositories.address'], 'calls': [], 'call_map': {}}",import,shipping.application.repositories.address,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",import,dataclasses,,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",import,uuid,,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",import,injector,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",import,foundation.events,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",import,payments.config,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",import,payments.events,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",import,payments.facade,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",import,uuid,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",import,payments,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",import,payments.api,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",import,payments.config,,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",import,payments.events,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",import,enum,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",import,typing,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",import,uuid,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",import,payments.models,,
"{'language': 'python', 'functions': [], 'classes': ['PaymentsConfig'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['dataclass', 4]], 'call_map': {'dataclass': [4]}}",import,dataclasses,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",import,sqlalchemy,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",import,db_infrastructure,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",import,requests,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",import,payments.api.exceptions,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",import,payments.api.requests,,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",import,payments.api.responses,,
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['from_dict'], 'classes': ['Response', 'ChargeResponse', 'CaptureResponse'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['fields', 8], ['cls', 10]], 'call_map': {'from_dict': [], 'fields': [8], 'cls': [10]}}",import,dataclasses,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['payments.api.consumer', 'payments.api.exceptions'], 'calls': [], 'call_map': {}}",import,payments.api.consumer,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['payments.api.consumer', 'payments.api.exceptions'], 'calls': [], 'call_map': {}}",import,payments.api.exceptions,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,typing,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,unittest.mock,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,uuid,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,_pytest.fixtures,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,pytest,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,db_infrastructure,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,payments.api,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,payments.api.exceptions,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,payments.config,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,payments.dao,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,payments.events,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,payments.facade,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",import,payments.models,,
"{'language': 'python', 'functions': ['pytest_addoption'], 'classes': [], 'interfaces': [], 'imports': ['_pytest.config.argparsing'], 'calls': [], 'call_map': {'pytest_addoption': []}}",import,_pytest.config.argparsing,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",import,datetime,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",import,_pytest.fixtures,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",import,pytest,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",import,requests,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",import,payments.api,,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",import,payments.api.requests,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': ['async_handler_generic_task'], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy.engine', 'main', 'main.modules'], 'calls': [['bootstrap_app', 13], ['instance', 20]], 'call_map': {'async_handler_generic_task': [], 'bootstrap_app': [13], 'instance': [20]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['async_handler_generic_task'], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy.engine', 'main', 'main.modules'], 'calls': [['bootstrap_app', 13], ['instance', 20]], 'call_map': {'async_handler_generic_task': [], 'bootstrap_app': [13], 'instance': [20]}}",import,main,,
"{'language': 'python', 'functions': ['async_handler_generic_task'], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy.engine', 'main', 'main.modules'], 'calls': [['bootstrap_app', 13], ['instance', 20]], 'call_map': {'async_handler_generic_task': [], 'bootstrap_app': [13], 'instance': [20]}}",import,main.modules,,
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",import,types,,
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",import,redis,,
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",import,typing_extensions,,
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",import,foundation.locks,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,os,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,dotenv,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,injector,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,sqlalchemy,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,auctions,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,auctions_infrastructure,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,customer_relationship,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,db_infrastructure,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,main.modules,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,payments,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,processes,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,shipping,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,shipping_infrastructure,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,web_app_models,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,auctions_infrastructure,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,customer_relationship.models,,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",import,web_app_models,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,threading,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,typing,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,injector,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,injector,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,redis,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,rq,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,sqlalchemy,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,sqlalchemy.orm,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,foundation.locks,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,customer_relationship,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,main.async_handler_task,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,main.redis,,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",import,payments,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",import,abc,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",import,injector,,
"{'language': 'python', 'functions': ['method_dispatch', 'wrapper'], 'classes': [], 'interfaces': [], 'imports': ['functools', 'typing'], 'calls': [], 'call_map': {'method_dispatch': [], 'wrapper': []}}",import,functools,,
"{'language': 'python', 'functions': ['method_dispatch', 'wrapper'], 'classes': [], 'interfaces': [], 'imports': ['functools', 'typing'], 'calls': [], 'call_map': {'method_dispatch': [], 'wrapper': []}}",import,typing,,
"{'language': 'python', 'functions': ['__enter__', '__exit__'], 'classes': ['AlreadyLocked', 'Lock'], 'interfaces': [], 'imports': ['types', 'typing', 'typing_extensions'], 'calls': [], 'call_map': {'__enter__': [], '__exit__': []}}",import,types,,
"{'language': 'python', 'functions': ['__enter__', '__exit__'], 'classes': ['AlreadyLocked', 'Lock'], 'interfaces': [], 'imports': ['types', 'typing', 'typing_extensions'], 'calls': [], 'call_map': {'__enter__': [], '__exit__': []}}",import,typing,,
"{'language': 'python', 'functions': ['__enter__', '__exit__'], 'classes': ['AlreadyLocked', 'Lock'], 'interfaces': [], 'imports': ['types', 'typing', 'typing_extensions'], 'calls': [], 'call_map': {'__enter__': [], '__exit__': []}}",import,typing_extensions,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",import,dataclasses,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",import,datetime,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",import,enum,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",import,json,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",import,typing,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",import,uuid,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",import,typing_extensions,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",import,decimal,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",import,functools,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",import,inspect,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",import,foundation.value_objects.currency,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['foundation.value_objects.currency', 'foundation.value_objects.money'], 'calls': [], 'call_map': {}}",import,foundation.value_objects.currency,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['foundation.value_objects.currency', 'foundation.value_objects.money'], 'calls': [], 'call_map': {}}",import,foundation.value_objects.money,,
"{'language': 'python', 'functions': ['get_dollars'], 'classes': [], 'interfaces': [], 'imports': ['decimal', 'typing', 'foundation.value_objects'], 'calls': [['Money', 8]], 'call_map': {'get_dollars': [], 'Money': [8]}}",import,decimal,,
"{'language': 'python', 'functions': ['get_dollars'], 'classes': [], 'interfaces': [], 'imports': ['decimal', 'typing', 'foundation.value_objects'], 'calls': [['Money', 8]], 'call_map': {'get_dollars': [], 'Money': [8]}}",import,typing,,
"{'language': 'python', 'functions': ['get_dollars'], 'classes': [], 'interfaces': [], 'imports': ['decimal', 'typing', 'foundation.value_objects'], 'calls': [['Money', 8]], 'call_map': {'get_dollars': [], 'Money': [8]}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['foundation.value_objects.factories.dollars'], 'calls': [], 'call_map': {}}",import,foundation.value_objects.factories.dollars,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",import,decimal,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",import,operator,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",import,typing,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",import,pytest,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",import,foundation.value_objects.currency,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",import,json,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",import,uuid,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",import,sqlalchemy,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",import,foundation,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",import,db_infrastructure,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",import,typing,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",import,injector,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",import,typing_extensions,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",import,customer_relationship,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",import,payments,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",import,processes.paying_for_won_item,,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",import,processes.repository,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,datetime,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,typing,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,unittest.mock,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,uuid,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,freezegun,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,pytest,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,auctions,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,customer_relationship,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,payments,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,processes.paying_for_won_item,,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",import,processes.paying_for_won_item.saga,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",import,datetime,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",import,json,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",import,uuid,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",import,pytest,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",import,db_infrastructure,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",import,processes.paying_for_won_item,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",import,processes.paying_for_won_item.saga,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",import,processes.repository,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",import,uuid,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",import,injector,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",import,foundation.events,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",import,foundation.locks,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",import,foundation.method_dispatch,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",import,auctions,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",import,payments,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",import,processes.paying_for_won_item,,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",import,processes.repository,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['processes.paying_for_won_item.saga', 'processes.paying_for_won_item.saga_handler'], 'calls': [], 'call_map': {}}",import,processes.paying_for_won_item.saga,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['processes.paying_for_won_item.saga', 'processes.paying_for_won_item.saga_handler'], 'calls': [], 'call_map': {}}",import,processes.paying_for_won_item.saga_handler,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",import,datetime,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",import,enum,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",import,uuid,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",import,foundation.method_dispatch,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",import,auctions,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",import,customer_relationship,,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",import,payments,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",import,injector,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",import,foundation.events,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",import,auctions,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",import,customer_relationship.config,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",import,customer_relationship.facade,,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",import,customer_relationship.models,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",import,customer_relationship,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",import,customer_relationship.config,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",import,customer_relationship.email_sender,,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",import,customer_relationship.models,,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",import,email.mime.multipart,,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",import,email.mime.text,,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",import,smtplib,,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",import,customer_relationship.config,,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",import,customer_relationship.emails,,
"{'language': 'python', 'functions': ['formatted_from'], 'classes': ['CustomerRelationshipConfig'], 'interfaces': [], 'imports': ['dataclasses', 'typing'], 'calls': [['dataclass', 5]], 'call_map': {'dataclass': [5], 'formatted_from': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['formatted_from'], 'classes': ['CustomerRelationshipConfig'], 'interfaces': [], 'imports': ['dataclasses', 'typing'], 'calls': [['dataclass', 5]], 'call_map': {'dataclass': [5], 'formatted_from': []}}",import,typing,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 6], ['Column', 6], ['String', 6]], 'call_map': {'Table': [5], 'Column': [6, 6], 'String': [6]}}",import,sqlalchemy,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 6], ['Column', 6], ['String', 6]], 'call_map': {'Table': [5], 'Column': [6, 6], 'String': [6]}}",import,db_infrastructure,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",import,abc,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",import,injector,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",import,auctions,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",import,auctions_infrastructure.models,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",import,auctions_infrastructure.queries,,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",import,auctions_infrastructure.repositories,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",import,sqlalchemy,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",import,db_infrastructure,,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",import,datetime,,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",import,unittest.mock,,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",import,pytest,,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",import,pytz,,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,datetime,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,decimal,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,unittest.mock,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,pytest,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,sqlalchemy,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,auctions_infrastructure,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,auctions_infrastructure.repositories,,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",import,db_infrastructure,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['auctions_infrastructure.queries.auctions'], 'calls': [], 'call_map': {}}",import,auctions_infrastructure.queries.auctions,,
"{'language': 'python', 'functions': ['__init__'], 'classes': ['SqlQuery'], 'interfaces': [], 'imports': ['sqlalchemy.engine'], 'calls': [], 'call_map': {'__init__': []}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",import,typing,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",import,sqlalchemy,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",import,auctions.application.queries,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",import,auctions_infrastructure,,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",import,auctions_infrastructure.queries.base,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['auctions_infrastructure.repositories.auctions'], 'calls': [], 'call_map': {}}",import,auctions_infrastructure.repositories.auctions,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",import,pytz,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",import,auctions.application.repositories,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",import,auctions_infrastructure,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': ['address_repo'], 'classes': ['ShippingInfrastructure'], 'interfaces': [], 'imports': ['injector', 'shipping', 'shipping_infrastructure.models', 'shipping_infrastructure.repositories'], 'calls': [['FakeAddressRepository', 25]], 'call_map': {'address_repo': [], 'FakeAddressRepository': [25]}}",import,injector,,
"{'language': 'python', 'functions': ['address_repo'], 'classes': ['ShippingInfrastructure'], 'interfaces': [], 'imports': ['injector', 'shipping', 'shipping_infrastructure.models', 'shipping_infrastructure.repositories'], 'calls': [['FakeAddressRepository', 25]], 'call_map': {'address_repo': [], 'FakeAddressRepository': [25]}}",import,shipping,,
"{'language': 'python', 'functions': ['address_repo'], 'classes': ['ShippingInfrastructure'], 'interfaces': [], 'imports': ['injector', 'shipping', 'shipping_infrastructure.models', 'shipping_infrastructure.repositories'], 'calls': [['FakeAddressRepository', 25]], 'call_map': {'address_repo': [], 'FakeAddressRepository': [25]}}",import,shipping_infrastructure.models,,
"{'language': 'python', 'functions': ['address_repo'], 'classes': ['ShippingInfrastructure'], 'interfaces': [], 'imports': ['injector', 'shipping', 'shipping_infrastructure.models', 'shipping_infrastructure.repositories'], 'calls': [['FakeAddressRepository', 25]], 'call_map': {'address_repo': [], 'FakeAddressRepository': [25]}}",import,shipping_infrastructure.repositories,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",import,sqlalchemy,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",import,db_infrastructure,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",import,shipping.domain.value_objects,,
"{'language': 'python', 'functions': ['get'], 'classes': ['FakeAddressRepository'], 'interfaces': [], 'imports': ['uuid', 'faker', 'shipping', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [['Address', 13]], 'call_map': {'get': [], 'Address': [13]}}",import,uuid,,
"{'language': 'python', 'functions': ['get'], 'classes': ['FakeAddressRepository'], 'interfaces': [], 'imports': ['uuid', 'faker', 'shipping', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [['Address', 13]], 'call_map': {'get': [], 'Address': [13]}}",import,faker,,
"{'language': 'python', 'functions': ['get'], 'classes': ['FakeAddressRepository'], 'interfaces': [], 'imports': ['uuid', 'faker', 'shipping', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [['Address', 13]], 'call_map': {'get': [], 'Address': [13]}}",import,shipping,,
"{'language': 'python', 'functions': ['get'], 'classes': ['FakeAddressRepository'], 'interfaces': [], 'imports': ['uuid', 'faker', 'shipping', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [['Address', 13]], 'call_map': {'get': [], 'Address': [13]}}",import,shipping.domain.entities,,
"{'language': 'python', 'functions': ['get'], 'classes': ['FakeAddressRepository'], 'interfaces': [], 'imports': ['uuid', 'faker', 'shipping', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [['Address', 13]], 'call_map': {'get': [], 'Address': [13]}}",import,shipping.domain.value_objects,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['shipping_infrastructure.repositories.address'], 'calls': [], 'call_map': {}}",import,shipping_infrastructure.repositories.address,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",import,typing,,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",import,uuid,,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",import,sqlalchemy,,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",import,sqlalchemy.dialects.postgresql,,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",import,sqlalchemy.ext.declarative,,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",import,sqlalchemy.types,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",import,injector,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",import,auctions.application.queries,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",import,auctions.application.repositories,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",import,auctions.application.use_cases,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",import,auctions.domain.events,,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",import,dataclasses,,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",import,typing,,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",import,foundation.events,,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",import,datetime,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",import,auctions.domain.entities.bid,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",import,auctions.domain.events,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",import,auctions.domain.exceptions,,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['auctions.domain.entities.auction', 'auctions.domain.entities.bid'], 'calls': [], 'call_map': {}}",import,auctions.domain.entities.auction,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['auctions.domain.entities.auction', 'auctions.domain.entities.bid'], 'calls': [], 'call_map': {}}",import,auctions.domain.entities.bid,,
"{'language': 'python', 'functions': [], 'classes': ['Bid'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 9]], 'call_map': {'dataclass': [9]}}",import,dataclasses,,
"{'language': 'python', 'functions': [], 'classes': ['Bid'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 9]], 'call_map': {'dataclass': [9]}}",import,typing,,
"{'language': 'python', 'functions': [], 'classes': ['Bid'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 9]], 'call_map': {'dataclass': [9]}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': [], 'classes': ['Bid'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 9]], 'call_map': {'dataclass': [9]}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,datetime,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,unittest.mock,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,freezegun,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,pytest,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,pytz,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,foundation.events,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,auctions,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,auctions.application.repositories,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,auctions.application.use_cases.beginning_auction,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,auctions.application.use_cases.placing_bid,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,auctions.domain.exceptions,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,auctions.tests.factories,,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",import,auctions.tests.in_memory_repo,,
"{'language': 'python', 'functions': [], 'classes': ['AuctionFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'foundation.value_objects.factories', 'auctions.domain.entities'], 'calls': [['get_dollars', 15]], 'call_map': {'get_dollars': [15]}}",import,factory,,
"{'language': 'python', 'functions': [], 'classes': ['AuctionFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'foundation.value_objects.factories', 'auctions.domain.entities'], 'calls': [['get_dollars', 15]], 'call_map': {'get_dollars': [15]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': [], 'classes': ['AuctionFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'foundation.value_objects.factories', 'auctions.domain.entities'], 'calls': [['get_dollars', 15]], 'call_map': {'get_dollars': [15]}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",import,datetime,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",import,unittest.mock,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",import,pytest,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",import,foundation.events,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",import,auctions,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",import,auctions.application.use_cases.beginning_auction,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",import,auctions.domain.exceptions,,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",import,auctions.tests.in_memory_repo,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",import,foundation.events,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",import,auctions.application.repositories,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",import,datetime,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",import,pytest,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",import,auctions.domain.events,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",import,auctions.domain.exceptions,,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",import,auctions.tests.factories,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",import,unittest.mock,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",import,pytest,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",import,auctions.application.use_cases,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",import,auctions.application.use_cases.placing_bid,,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",import,typing,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",import,unittest.mock,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",import,pytest,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",import,auctions.application.use_cases,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",import,auctions.application.use_cases.withdrawing_bids,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",import,typing,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",import,unittest.mock,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",import,pytest,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",import,auctions.application.repositories,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",import,auctions.application.use_cases.placing_bid,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",import,auctions.application.use_cases.withdrawing_bids,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",import,auctions.tests.factories,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",import,datetime,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",import,auctions.application.repositories,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",import,auctions.domain.exceptions,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['EndingAuctionInputDto', 'EndingAuction'], 'interfaces': [], 'imports': ['dataclasses', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['EndingAuctionInputDto', 'EndingAuction'], 'interfaces': [], 'imports': ['dataclasses', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",import,auctions.application.repositories,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['EndingAuctionInputDto', 'EndingAuction'], 'interfaces': [], 'imports': ['dataclasses', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",import,typing,,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",import,auctions.application.repositories,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",import,abc,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",import,dataclasses,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",import,auctions.application.repositories,,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.ending_auction', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids'], 'calls': [], 'call_map': {}}",import,auctions.application.use_cases.beginning_auction,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.ending_auction', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids'], 'calls': [], 'call_map': {}}",import,auctions.application.use_cases.ending_auction,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.ending_auction', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids'], 'calls': [], 'call_map': {}}",import,auctions.application.use_cases.placing_bid,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.ending_auction', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids'], 'calls': [], 'call_map': {}}",import,auctions.application.use_cases.withdrawing_bids,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['auctions.application.queries.auctions'], 'calls': [], 'call_map': {}}",import,auctions.application.queries.auctions,,
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",import,abc,,
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",import,datetime,,
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",import,typing,,
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['auctions.application.repositories.auctions'], 'calls': [], 'call_map': {}}",import,auctions.application.repositories.auctions,,
"{'language': 'python', 'functions': ['get', 'save'], 'classes': ['AuctionsRepository'], 'interfaces': [], 'imports': ['abc', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'get': [], 'save': []}}",import,abc,,
"{'language': 'python', 'functions': ['get', 'save'], 'classes': ['AuctionsRepository'], 'interfaces': [], 'imports': ['abc', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'get': [], 'save': []}}",import,auctions.domain.entities,,
"{'language': 'python', 'functions': ['get', 'save'], 'classes': ['AuctionsRepository'], 'interfaces': [], 'imports': ['abc', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'get': [], 'save': []}}",import,auctions.domain.value_objects,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",import,setuptools,,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",import,datetime,,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",import,functools,,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",import,json,,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",import,auctions,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",import,typing,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",import,flask,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",import,flask_security,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",import,flask_security.datastore,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",import,sqlalchemy.orm,,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",import,web_app_models,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,typing,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,flask,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,flask_injector,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,sqlalchemy.orm,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,main,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,main.modules,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,web_app.blueprints.auctions,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,web_app.blueprints.shipping,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,web_app.json_encoder,,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",import,web_app.security,,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",import,typing,,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",import,flask,,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",import,marshmallow,,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",import,marshmallow_dataclass,,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",import,foundation.value_objects,,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",import,web_app.serialization.fields,,
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",import,marshmallow,,
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",import,flask,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",import,pytest,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",import,customer_relationship,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",import,factory,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",import,flask.testing,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",import,injector,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",import,pytest,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",import,foundation.value_objects.factories,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",import,auctions,,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",import,main.modules,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",import,os,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",import,_pytest.tmpdir,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",import,flask,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",import,injector,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",import,pytest,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",import,sqlalchemy.engine,,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",import,web_app.app,,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",import,dataclasses,,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",import,flask,,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",import,flask_login,,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",import,shipping,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",import,flask,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",import,flask_injector,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",import,flask_login,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",import,injector,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",import,auctions,,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",import,web_app.serialization.dto,,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,11.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,12.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,ForeignKey,12.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,13.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,ForeignKey,13.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,19.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,20.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,String,20.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,21.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,String,21.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,27.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,28.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,String,28.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,29.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,String,29.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,30.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Boolean,30.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,Column,31.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,DateTime,31.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,relationship,32.0,
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call,backref,32.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",call,dataclass,7.0,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",call,dataclass,13.0,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",call,dataclass,19.0,
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",call,dataclass,25.0,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",call,PaymentsFacade,27.0,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",call,AsyncEventHandlerProvider,30.0,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call,ApiConsumer,17.0,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call,PaymentStarted,26.0,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call,Exception,31.0,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call,PaymentFailed,37.0,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call,PaymentCharged,41.0,
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call,PaymentCaptured,48.0,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call,PaymentDto,30.0,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call,UUID,30.0,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call,str,37.0,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call,int,39.0,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call,str,57.0,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call,str,64.0,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call,str,66.0,
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call,str,72.0,
"{'language': 'python', 'functions': [], 'classes': ['PaymentsConfig'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['dataclass', 4]], 'call_map': {'dataclass': [4]}}",call,dataclass,4.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,Table,5.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,Column,8.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,String,8.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,Column,9.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,Column,10.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,Column,11.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,String,11.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,Column,12.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,Column,13.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,String,13.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,Column,14.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call,String,14.0,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call,TypeVar,11.0,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call,ChargeRequest,20.0,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call,str,20.0,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call,CaptureRequest,25.0,
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call,int,36.0,
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",call,getattr,10.0,
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",call,fields,10.0,
"{'language': 'python', 'functions': ['from_dict'], 'classes': ['Response', 'ChargeResponse', 'CaptureResponse'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['fields', 8], ['cls', 10]], 'call_map': {'from_dict': [], 'fields': [8], 'cls': [10]}}",call,fields,8.0,
"{'language': 'python', 'functions': ['from_dict'], 'classes': ['Response', 'ChargeResponse', 'CaptureResponse'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['fields', 8], ['cls', 10]], 'call_map': {'from_dict': [], 'fields': [8], 'cls': [10]}}",call,cls,10.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,Mock,29.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,PaymentsFacade,39.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,PaymentsConfig,39.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,getattr,44.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,str,47.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,get_dollars,72.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,dict,78.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,str,79.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,int,81.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,PaymentDto,90.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,PaymentStarted,91.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,get_dollars,116.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,get_payment,117.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,PaymentCharged,120.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,get_dollars,132.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,get_payment,133.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,PaymentFailed,134.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,get_payment,145.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call,PaymentCaptured,146.0,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call,str,16.0,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call,ApiConsumer,23.0,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call,str,34.0,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call,str,39.0,
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call,get_dollars,44.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': ['async_handler_generic_task'], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy.engine', 'main', 'main.modules'], 'calls': [['bootstrap_app', 13], ['instance', 20]], 'call_map': {'async_handler_generic_task': [], 'bootstrap_app': [13], 'instance': [20]}}",call,bootstrap_app,13.0,
"{'language': 'python', 'functions': ['async_handler_generic_task'], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy.engine', 'main', 'main.modules'], 'calls': [['bootstrap_app', 13], ['instance', 20]], 'call_map': {'async_handler_generic_task': [], 'bootstrap_app': [13], 'instance': [20]}}",call,instance,20.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,create_engine,48.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,_setup_dependency_injection,49.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,_setup_orm_events,50.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,_create_db_schema,52.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,AppContext,54.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,Db,60.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,RedisMod,61.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,Rq,62.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,EventBusMod,63.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,Configs,64.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,Auctions,65.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,AuctionsInfrastructure,66.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,Shipping,67.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,ShippingInfrastructure,68.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,CustomerRelationship,69.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,Payments,70.0,
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call,Processes,71.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,hasattr,28.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,setattr,29.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,getattr,32.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,delattr,34.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,repr,34.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,delattr,36.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,getattr,46.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,repr,46.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,setattr,49.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,repr,49.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,getattr,51.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,Exception,53.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,Session,73.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,Redis,81.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,RedisLock,86.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,Queue,95.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,InjectorEventBus,111.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,CustomerRelationshipConfig,121.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,int,123.0,
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call,PaymentsConfig,132.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call,TypeVar,6.0,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call,type,94.0,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call,isinstance,98.0,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call,handler,100.0,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call,type,103.0,
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call,isinstance,107.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,TypeVar,13.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,hasattr,23.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,type,23.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,Exception,28.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,get_dollars,42.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,str,51.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,_extract_type_if_optional,59.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,issubclass,61.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,Exception,64.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,dataclass,71.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,type,76.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,_extract_type_if_optional,77.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,issubclass,79.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,Exception,82.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,getattr,84.0,
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call,getattr,85.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,issubclass,12.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,ValueError,13.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,Decimal,15.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,ValueError,17.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,ValueError,21.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,ValueError,23.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,isinstance,40.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,isinstance,45.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,TypeError,46.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,TypeError,48.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,isinstance,53.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,Money,55.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,isinstance,58.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,Money,60.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,repr,63.0,
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call,hash,69.0,
"{'language': 'python', 'functions': ['get_dollars'], 'classes': [], 'interfaces': [], 'imports': ['decimal', 'typing', 'foundation.value_objects'], 'calls': [['Money', 8]], 'call_map': {'get_dollars': [], 'Money': [8]}}",call,Money,8.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,19.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,24.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,30.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,31.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,repr,35.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,39.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,39.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,str,42.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,48.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,48.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,49.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,49.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,50.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,50.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,51.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,51.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,59.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,59.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,64.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,64.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,70.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,70.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,71.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,71.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,72.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,72.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,73.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,73.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,cmp_operator,79.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,85.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,85.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,85.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,86.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,86.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,86.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,math_operator,92.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,96.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Decimal,96.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,96.0,
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call,Money,99.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call,TypeVar,12.0,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call,Table,15.0,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call,Column,16.0,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call,Column,16.0,
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call,cast,28.0,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call,PayingForWonItem,40.0,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call,ProcessManagerDataRepo,44.0,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call,issubclass,48.0,
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call,AsyncEventHandlerProvider,50.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,Mock,27.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,Mock,32.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,PayingForWonItemData,37.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,PayingForWonItem,42.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,AuctionEnded,53.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,get_dollars,53.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,timedelta,65.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,PayingForWonItemData,72.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,timedelta,73.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,get_dollars,73.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,PaymentCaptured,83.0,
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call,timedelta,99.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call,datetime,15.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call,ProcessManagerDataRepo,30.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call,PayingForWonItemData,37.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call,UUID,37.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call,PayingForWonItemData,49.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call,UUID,50.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call,get_dollars,53.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call,uuid4,73.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call,type,77.0,
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",call,PayingForWonItemData,38.0,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",call,Exception,44.0,
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",call,timedelta,56.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",call,CustomerRelationshipFacade,25.0,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",call,AsyncEventHandlerProvider,28.0,
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",call,AsyncEventHandlerProvider,29.0,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call,EmailSender,15.0,
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call,dict,40.0,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",call,MIMEMultipart,16.0,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",call,MIMEText,20.0,
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",call,MIMEText,21.0,
"{'language': 'python', 'functions': ['formatted_from'], 'classes': ['CustomerRelationshipConfig'], 'interfaces': [], 'imports': ['dataclasses', 'typing'], 'calls': [['dataclass', 5]], 'call_map': {'dataclass': [5], 'formatted_from': []}}",call,dataclass,5.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 6], ['Column', 6], ['String', 6]], 'call_map': {'Table': [5], 'Column': [6, 6], 'String': [6]}}",call,Table,5.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 6], ['Column', 6], ['String', 6]], 'call_map': {'Table': [5], 'Column': [6, 6], 'String': [6]}}",call,Column,6.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 6], ['Column', 6], ['String', 6]], 'call_map': {'Table': [5], 'Column': [6, 6], 'String': [6]}}",call,Column,6.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 6], ['Column', 6], ['String', 6]], 'call_map': {'Table': [5], 'Column': [6, 6], 'String': [6]}}",call,String,6.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",call,SqlGetActiveAuctions,23.0,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",call,SqlGetSingleAuction,27.0,
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",call,SqlAlchemyAuctionsRepo,31.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Table,5.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Column,8.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Column,9.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,String,9.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Column,10.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Column,11.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Column,12.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Column,13.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Table,17.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Column,20.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Column,21.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Column,22.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,Column,23.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call,ForeignKey,23.0,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",call,timedelta,12.0,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",call,timedelta,17.0,
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",call,Mock,22.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,Decimal,30.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,Decimal,50.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,Decimal,51.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,SqlAlchemyAuctionsRepo,93.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,get_dollars,97.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,get_dollars,98.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,set,100.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,Bid,100.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,get_dollars,100.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,get_dollars,112.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,Auction,113.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,get_dollars,116.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,Bid,119.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,get_dollars,119.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,Bid,120.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,SqlAlchemyAuctionsRepo,125.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,select,127.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,select,128.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,Auction,137.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,get_dollars,140.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,Bid,142.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,get_dollars,142.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,SqlAlchemyAuctionsRepo,147.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,select,149.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,SqlAlchemyAuctionsRepo,156.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,get_dollars,158.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,EventBusStub,175.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,SqlAlchemyAuctionsRepo,182.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,get_dollars,184.0,
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call,len,188.0,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",call,_row_to_dto,16.0,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",call,_row_to_dto,23.0,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",call,AuctionDto,27.0,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",call,get_dollars,30.0,
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",call,get_dollars,31.0,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call,Exception,23.0,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call,Bid,29.0,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call,get_dollars,29.0,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call,Auction,30.0,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call,get_dollars,33.0,
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call,dict,49.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': ['address_repo'], 'classes': ['ShippingInfrastructure'], 'interfaces': [], 'imports': ['injector', 'shipping', 'shipping_infrastructure.models', 'shipping_infrastructure.repositories'], 'calls': [['FakeAddressRepository', 25]], 'call_map': {'address_repo': [], 'FakeAddressRepository': [25]}}",call,FakeAddressRepository,25.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Table,6.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Column,9.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Column,10.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,String,10.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Column,11.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Column,12.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,String,12.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Column,13.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,String,13.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Column,14.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,String,14.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Column,15.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,String,15.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Column,16.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,String,16.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Column,17.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,String,17.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Column,18.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call,Enum,18.0,
"{'language': 'python', 'functions': ['get'], 'classes': ['FakeAddressRepository'], 'interfaces': [], 'imports': ['uuid', 'faker', 'shipping', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [['Address', 13]], 'call_map': {'get': [], 'Address': [13]}}",call,Address,13.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call,MetaData,9.0,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call,declarative_base,10.0,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call,UUID,26.0,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call,CHAR,28.0,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call,str,34.0,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call,isinstance,36.0,
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call,isinstance,46.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call,PlacingBid,55.0,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call,WithdrawingBids,59.0,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call,EndingAuction,63.0,
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call,BeginningAuction,67.0,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",call,dataclass,10.0,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",call,dataclass,18.0,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",call,dataclass,26.0,
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",call,dataclass,34.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,super,17.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,sorted,21.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,Bid,32.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,WinningBidPlaced,33.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,BidderHasBeenOverbid,35.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,AuctionEnded,77.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,Auction,81.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,AuctionBegan,82.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,isinstance,89.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,vars,89.0,
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call,vars,89.0,
"{'language': 'python', 'functions': [], 'classes': ['Bid'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 9]], 'call_map': {'dataclass': [9]}}",call,dataclass,9.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidOutputBoundaryFake,33.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,AuctionFactory,38.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,Mock,53.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,InMemoryAuctionsRepo,58.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBid,66.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,BeginningAuction,71.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,77.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,77.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidOutputDto,79.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,79.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,86.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,86.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidOutputDto,88.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,88.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,94.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,94.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,96.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,96.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidOutputDto,98.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,98.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,104.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,104.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,106.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,106.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidOutputDto,108.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,108.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,114.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,114.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,WinningBidPlaced,116.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,116.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,timedelta,124.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,BeginningAuctionInputDto,125.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,125.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,126.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,126.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,129.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,129.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,call,133.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,WinningBidPlaced,133.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,133.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,call,134.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,BidderHasBeenOverbid,134.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,134.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,144.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,144.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,147.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,147.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,call,151.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,WinningBidPlaced,151.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,151.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,call,152.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,BidderHasBeenOverbid,152.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,152.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,162.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,162.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,165.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,165.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,WinningBidPlaced,167.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,167.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,timedelta,173.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,freeze_time,174.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,BeginningAuctionInputDto,176.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,176.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,timedelta,176.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,PlacingBidInputDto,180.0,
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call,get_dollars,180.0,
"{'language': 'python', 'functions': [], 'classes': ['AuctionFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'foundation.value_objects.factories', 'auctions.domain.entities'], 'calls': [['get_dollars', 15]], 'call_map': {'get_dollars': [15]}}",call,get_dollars,15.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,Mock,17.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,InMemoryAuctionsRepo,22.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,BeginningAuction,27.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,BeginningAuctionInputDto,33.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,get_dollars,33.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,timedelta,33.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,AuctionBegan,36.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,get_dollars,36.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,timedelta,40.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,BeginningAuctionInputDto,42.0,
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call,get_dollars,42.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,timedelta,15.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,19.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,25.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,26.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,26.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,26.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,26.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,29.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,33.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,39.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,41.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,41.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,42.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,42.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,43.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,43.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,51.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,53.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,59.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,61.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,67.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,67.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,67.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,76.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,76.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,76.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,84.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,84.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,84.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,87.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,93.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,96.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,100.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,100.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,101.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,103.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,BidderHasBeenOverbid,106.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,111.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,112.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,WinningBidPlaced,116.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,120.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,120.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,120.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,121.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,WinningBidPlaced,125.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,BidderHasBeenOverbid,126.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,131.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,Bid,131.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,131.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionEnded,135.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,140.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionEnded,144.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,149.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,156.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,get_dollars,160.0,
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call,AuctionFactory,164.0,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call,get_dollars,20.0,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call,PlacingBidInputDto,25.0,
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call,PlacingBidOutputDto,56.0,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",call,WithdrawingBidsInputDto,18.0,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call,AuctionFactory,20.0,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call,Mock,25.0,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call,Mock,25.0,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call,Mock,30.0,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call,PlacingBid,35.0,
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call,WithdrawingBids,40.0,
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",call,isinstance,15.0,
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",call,PlacingBidOutputDto,39.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,setup,3.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call,find_packages,6.0,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",call,TypeError,13.0,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",call,type,13.0,
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",call,str,27.0,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call,str,16.0,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call,Security,44.0,
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call,SaUserDatastore,44.0,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call,Flask,20.0,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call,bootstrap_app,37.0,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call,FlaskInjector,38.0,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call,AuctionsWeb,38.0,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call,hasattr,53.0,
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call,security_setup,67.0,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call,TypeVar,11.0,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call,class_schema,19.0,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call,schema_cls,20.0,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call,cast,22.0,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call,dict,22.0,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call,abort,24.0,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call,make_response,24.0,
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call,jsonify,24.0,
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",call,str,8.0,
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",call,get_dollars,12.0,
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",call,str,14.0,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call,isinstance,15.0,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call,isinstance,16.0,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call,assert_customer_with_given_email_exists,26.0,
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call,RegisteredUser,44.0,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call,get_dollars,18.0,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call,int,32.0,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call,type,39.0,
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call,type,46.0,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call,open,17.0,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call,str,32.0,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call,create_app,44.0,
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call,create_engine,59.0,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call,Blueprint,13.0,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call,abort,20.0,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call,make_response,21.0,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call,jsonify,21.0,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call,abort,27.0,
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call,make_response,33.0,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call,Blueprint,17.0,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call,PlacingBidPresenter,24.0,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call,make_response,29.0,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call,jsonify,29.0,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call,make_response,34.0,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call,jsonify,34.0,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call,abort,40.0,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call,get_dto,42.0,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call,make_response,57.0,
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call,jsonify,57.0,
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call_map,C,,o
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call_map,F,,o
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call_map,S,,t
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call_map,B,,o
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call_map,D,,a
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call_map,r,,e
"{'language': 'python', 'functions': [], 'classes': ['RolesUsers', 'Role', 'User'], 'interfaces': [], 'imports': ['flask_security', 'sqlalchemy', 'sqlalchemy.orm', 'db_infrastructure'], 'calls': [['Column', 11], ['Column', 12], ['ForeignKey', 12], ['Column', 13], ['ForeignKey', 13], ['Column', 19], ['Column', 20], ['String', 20], ['Column', 21], ['String', 21], ['Column', 27], ['Column', 28], ['String', 28], ['Column', 29], ['String', 29], ['Column', 30], ['Boolean', 30], ['Column', 31], ['DateTime', 31], ['relationship', 32], ['backref', 32]], 'call_map': {'Column': [11, 12, 13, 19, 20, 21, 27, 28, 29, 30, 31], 'ForeignKey': [12, 13], 'String': [20, 21, 28, 29], 'Boolean': [30], 'DateTime': [31], 'relationship': [32], 'backref': [32]}}",call_map,b,,a
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': ['query'], 'classes': ['PackageDto', 'GetNextPackage'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'typing'], 'calls': [], 'call_map': {'query': []}}",call_map,q,,u
"{'language': 'python', 'functions': ['get'], 'classes': ['AddressRepository'], 'interfaces': [], 'imports': ['abc', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [], 'call_map': {'get': []}}",call_map,g,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': [], 'classes': ['PaymentStarted', 'PaymentCharged', 'PaymentCaptured', 'PaymentFailed'], 'interfaces': [], 'imports': ['dataclasses', 'uuid', 'foundation.events'], 'calls': [['dataclass', 7], ['dataclass', 13], ['dataclass', 19], ['dataclass', 25]], 'call_map': {'dataclass': [7, 13, 19, 25]}}",call_map,d,,a
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",call_map,f,,a
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",call_map,P,,a
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",call_map,c,,o
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",call_map,A,,s
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__'], 'classes': ['Payments', 'PaymentChargedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'payments.config', 'payments.events', 'payments.facade'], 'calls': [['PaymentsFacade', 27], ['AsyncEventHandlerProvider', 30]], 'call_map': {'facade': [], 'PaymentsFacade': [27], 'configure': [], 'AsyncEventHandlerProvider': [30], '__init__': [], '__call__': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,A,,p
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,g,,e
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,s,,t
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,P,,a
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,c,,h
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,E,,x
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,P,,a
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,P,,a
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,c,,a
"{'language': 'python', 'functions': ['__init__', 'get_pending_payments', 'start_new_payment', 'charge', 'capture'], 'classes': ['PaymentsFacade'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects', 'payments', 'payments.api', 'payments.config', 'payments.events'], 'calls': [['ApiConsumer', 17], ['PaymentStarted', 26], ['Exception', 31], ['PaymentFailed', 37], ['PaymentCharged', 41], ['PaymentCaptured', 48]], 'call_map': {'__init__': [], 'ApiConsumer': [17], 'get_pending_payments': [], 'start_new_payment': [], 'PaymentStarted': [26], 'charge': [], 'Exception': [31], 'PaymentFailed': [37], 'PaymentCharged': [41], 'capture': [], 'PaymentCaptured': [48]}}",call_map,P,,a
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call_map,f,,r
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call_map,P,,a
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call_map,U,,U
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call_map,s,,t
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call_map,s,,t
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call_map,i,,n
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['from_row', 'start_new_payment', 'get_pending_payments', 'get_payment', 'get_payment_charge_id', 'update_payment'], 'classes': ['PaymentStatus', 'PaymentDto'], 'interfaces': [], 'imports': ['dataclasses', 'enum', 'typing', 'uuid', 'sqlalchemy.engine', 'foundation.value_objects', 'payments.models'], 'calls': [['PaymentDto', 30], ['UUID', 30], ['str', 37], ['int', 39], ['str', 57], ['str', 64], ['str', 66], ['str', 72]], 'call_map': {'from_row': [], 'PaymentDto': [30], 'UUID': [30], 'start_new_payment': [], 'str': [37, 57, 64, 66, 72], 'int': [39], 'get_pending_payments': [], 'get_payment': [], 'get_payment_charge_id': [], 'update_payment': []}}",call_map,u,,p
"{'language': 'python', 'functions': [], 'classes': ['PaymentsConfig'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['dataclass', 4]], 'call_map': {'dataclass': [4]}}",call_map,d,,a
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call_map,T,,a
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call_map,C,,o
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['String', 8], ['Column', 9], ['Column', 10], ['Column', 11], ['String', 11], ['Column', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14]], 'call_map': {'Table': [5], 'Column': [8, 9, 10, 11, 12, 13, 14], 'String': [8, 11, 13, 14]}}",call_map,S,,t
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call_map,T,,y
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call_map,c,,h
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call_map,C,,h
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call_map,s,,t
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call_map,c,,a
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call_map,C,,a
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call_map,_,,e
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call_map,_,,g
"{'language': 'python', 'functions': ['__init__', 'charge', 'capture', '_execute_request', '_get_iso_code_and_amount'], 'classes': ['ApiConsumer'], 'interfaces': [], 'imports': ['typing', 'requests', 'foundation.value_objects', 'payments.api.exceptions', 'payments.api.requests', 'payments.api.responses'], 'calls': [['TypeVar', 11], ['ChargeRequest', 20], ['str', 20], ['CaptureRequest', 25], ['int', 36]], 'call_map': {'TypeVar': [11], '__init__': [], 'charge': [], 'ChargeRequest': [20], 'str': [20], 'capture': [], 'CaptureRequest': [25], '_execute_request': [], '_get_iso_code_and_amount': [], 'int': [36]}}",call_map,i,,n
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",call_map,t,,o
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",call_map,f,,i
"{'language': 'python', 'functions': ['to_params', 'url'], 'classes': ['Request', 'ChargeRequest', 'CaptureRequest'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['getattr', 10], ['fields', 10]], 'call_map': {'to_params': [], 'getattr': [10], 'fields': [10], 'url': []}}",call_map,u,,r
"{'language': 'python', 'functions': ['from_dict'], 'classes': ['Response', 'ChargeResponse', 'CaptureResponse'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['fields', 8], ['cls', 10]], 'call_map': {'from_dict': [], 'fields': [8], 'cls': [10]}}",call_map,f,,r
"{'language': 'python', 'functions': ['from_dict'], 'classes': ['Response', 'ChargeResponse', 'CaptureResponse'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['fields', 8], ['cls', 10]], 'call_map': {'from_dict': [], 'fields': [8], 'cls': [10]}}",call_map,f,,i
"{'language': 'python', 'functions': ['from_dict'], 'classes': ['Response', 'ChargeResponse', 'CaptureResponse'], 'interfaces': [], 'imports': ['dataclasses'], 'calls': [['fields', 8], ['cls', 10]], 'call_map': {'from_dict': [], 'fields': [8], 'cls': [10]}}",call_map,c,,l
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,s,,q
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,e,,v
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,M,,o
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,s,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,f,,a
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,P,,a
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,P,,a
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,i,,n
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,g,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,s,,t
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,g,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,g,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,d,,i
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,i,,n
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,P,,a
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,P,,a
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,P,,a
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,P,,a
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'event_bus', 'setup_teardown_tables', 'facade', 'inserted_payment', 'get_payment', 'test_adding_new_payment_is_reflected_on_pending_payments_list', 'test_pending_payments_returns_only_new_payments', 'test_successful_charge_updates_status', 'test_unsuccessful_charge', 'test_capture'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'uuid', '_pytest.fixtures', 'pytest', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'db_infrastructure', 'payments.api', 'payments.api.exceptions', 'payments.config', 'payments.dao', 'payments.events', 'payments.facade', 'payments.models'], 'calls': [['Mock', 29], ['PaymentsFacade', 39], ['PaymentsConfig', 39], ['getattr', 44], ['str', 47], ['get_dollars', 72], ['dict', 78], ['str', 79], ['int', 81], ['PaymentDto', 90], ['PaymentStarted', 91], ['get_dollars', 116], ['get_payment', 117], ['PaymentCharged', 120], ['get_dollars', 132], ['get_payment', 133], ['PaymentFailed', 134], ['get_payment', 145], ['PaymentCaptured', 146]], 'call_map': {'sqlalchemy_connect_url': [], 'event_bus': [], 'Mock': [29], 'setup_teardown_tables': [], 'facade': [], 'PaymentsFacade': [39], 'PaymentsConfig': [39], 'inserted_payment': [], 'getattr': [44], 'str': [47, 79], 'get_payment': [117, 133, 145], 'test_adding_new_payment_is_reflected_on_pending_payments_list': [], 'get_dollars': [72, 116, 132], 'dict': [78], 'int': [81], 'PaymentDto': [90], 'PaymentStarted': [91], 'test_pending_payments_returns_only_new_payments': [], 'test_successful_charge_updates_status': [], 'PaymentCharged': [120], 'test_unsuccessful_charge': [], 'PaymentFailed': [134], 'test_capture': [], 'PaymentCaptured': [146]}}",call_map,P,,a
"{'language': 'python', 'functions': ['pytest_addoption'], 'classes': [], 'interfaces': [], 'imports': ['_pytest.config.argparsing'], 'calls': [], 'call_map': {'pytest_addoption': []}}",call_map,p,,y
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call_map,a,,p
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call_map,s,,t
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call_map,a,,p
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call_map,A,,p
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call_map,s,,o
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call_map,t,,e
"{'language': 'python', 'functions': ['api_key', 'api_consumer', 'source', 'test_charge_then_capture'], 'classes': [], 'interfaces': [], 'imports': ['datetime', '_pytest.fixtures', 'pytest', 'requests', 'foundation.value_objects.factories', 'payments.api', 'payments.api.requests'], 'calls': [['str', 16], ['ApiConsumer', 23], ['str', 34], ['str', 39], ['get_dollars', 44]], 'call_map': {'api_key': [], 'str': [16, 34, 39], 'api_consumer': [], 'ApiConsumer': [23], 'source': [], 'test_charge_then_capture': [], 'get_dollars': [44]}}",call_map,g,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': ['async_handler_generic_task'], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy.engine', 'main', 'main.modules'], 'calls': [['bootstrap_app', 13], ['instance', 20]], 'call_map': {'async_handler_generic_task': [], 'bootstrap_app': [13], 'instance': [20]}}",call_map,a,,s
"{'language': 'python', 'functions': ['async_handler_generic_task'], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy.engine', 'main', 'main.modules'], 'calls': [['bootstrap_app', 13], ['instance', 20]], 'call_map': {'async_handler_generic_task': [], 'bootstrap_app': [13], 'instance': [20]}}",call_map,b,,o
"{'language': 'python', 'functions': ['async_handler_generic_task'], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy.engine', 'main', 'main.modules'], 'calls': [['bootstrap_app', 13], ['instance', 20]], 'call_map': {'async_handler_generic_task': [], 'bootstrap_app': [13], 'instance': [20]}}",call_map,i,,n
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', '__enter__', '__exit__'], 'classes': ['RedisLock'], 'interfaces': [], 'imports': ['types', 'typing', 'redis', 'typing_extensions', 'foundation.locks'], 'calls': [], 'call_map': {'__init__': [], '__enter__': [], '__exit__': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,b,,o
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,c,,r
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,_,,s
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,_,,s
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,_,,c
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,A,,p
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,D,,b
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,R,,e
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,R,,q
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,E,,v
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,C,,o
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,A,,u
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,A,,u
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,S,,h
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,S,,h
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,C,,u
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,P,,a
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,P,,r
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,i,,n
"{'language': 'python', 'functions': ['bootstrap_app', '_setup_dependency_injection', '_setup_orm_events', 'insert_cb', 'update_cb', '_create_db_schema'], 'classes': ['AppContext'], 'interfaces': [], 'imports': ['dataclasses', 'os', 'dotenv', 'injector', 'sqlalchemy', 'sqlalchemy.engine', 'auctions', 'auctions_infrastructure', 'customer_relationship', 'db_infrastructure', 'main.modules', 'payments', 'processes', 'shipping', 'shipping_infrastructure', 'web_app_models', 'auctions_infrastructure', 'customer_relationship.models', 'web_app_models'], 'calls': [['create_engine', 48], ['_setup_dependency_injection', 49], ['_setup_orm_events', 50], ['_create_db_schema', 52], ['AppContext', 54], ['Db', 60], ['RedisMod', 61], ['Rq', 62], ['EventBusMod', 63], ['Configs', 64], ['Auctions', 65], ['AuctionsInfrastructure', 66], ['Shipping', 67], ['ShippingInfrastructure', 68], ['CustomerRelationship', 69], ['Payments', 70], ['Processes', 71]], 'call_map': {'bootstrap_app': [], 'create_engine': [48], '_setup_dependency_injection': [49], '_setup_orm_events': [50], '_create_db_schema': [52], 'AppContext': [54], 'Db': [60], 'RedisMod': [61], 'Rq': [62], 'EventBusMod': [63], 'Configs': [64], 'Auctions': [65], 'AuctionsInfrastructure': [66], 'Shipping': [67], 'ShippingInfrastructure': [68], 'CustomerRelationship': [69], 'Payments': [70], 'Processes': [71], 'insert_cb': [], 'update_cb': []}}",call_map,u,,p
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,c,,o
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,e,,n
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,h,,a
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,s,,e
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,e,,x
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,g,,e
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,d,,e
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,r,,e
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,_,,_
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,_,,_
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,g,,e
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,E,,x
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,_,,_
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,c,,o
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,s,,e
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,S,,e
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,R,,e
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,l,,o
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,c,,r
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,R,,e
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,q,,u
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,Q,,u
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,r,,u
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,e,,n
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,e,,v
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,I,,n
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,c,,u
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,C,,u
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,i,,n
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,p,,a
"{'language': 'python', 'functions': ['configure', 'enter', 'exit', '__enter__', '__exit__', 'get', '__init__', 'connection', 'session', '__init__', 'configure', 'lock', 'create_lock', 'queue', 'run_async_handler', 'enqueue_after_commit', 'event_bus', '__init__', 'customer_relationship_config', 'payments_config'], 'classes': ['RequestScope', 'Db', 'RedisMod', 'Rq', 'EventBusMod', 'Configs'], 'interfaces': [], 'imports': ['threading', 'typing', 'injector', 'injector', 'redis', 'rq', 'sqlalchemy', 'sqlalchemy.engine', 'sqlalchemy.orm', 'foundation.events', 'foundation.locks', 'customer_relationship', 'main.async_handler_task', 'main.redis', 'payments'], 'calls': [['hasattr', 28], ['setattr', 29], ['getattr', 32], ['delattr', 34], ['repr', 34], ['delattr', 36], ['getattr', 46], ['repr', 46], ['setattr', 49], ['repr', 49], ['getattr', 51], ['Exception', 53], ['Session', 73], ['Redis', 81], ['RedisLock', 86], ['Queue', 95], ['InjectorEventBus', 111], ['CustomerRelationshipConfig', 121], ['int', 123], ['PaymentsConfig', 132]], 'call_map': {'configure': [], 'enter': [], 'hasattr': [28], 'setattr': [29, 49], 'exit': [], 'getattr': [32, 46, 51], 'delattr': [34, 36], 'repr': [34, 46, 49], '__enter__': [], '__exit__': [], 'get': [], 'Exception': [53], '__init__': [], 'connection': [], 'session': [], 'Session': [73], 'Redis': [81], 'lock': [], 'create_lock': [], 'RedisLock': [86], 'queue': [], 'Queue': [95], 'run_async_handler': [], 'enqueue_after_commit': [], 'event_bus': [], 'InjectorEventBus': [111], 'customer_relationship_config': [], 'CustomerRelationshipConfig': [121], 'int': [123], 'payments_config': [], 'PaymentsConfig': [132]}}",call_map,P,,a
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call_map,T,,y
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call_map,_,,r
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call_map,d,,o
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call_map,c,,l
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call_map,g,,e
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call_map,p,,o
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call_map,t,,y
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call_map,i,,s
"{'language': 'python', 'functions': ['__init__', '_record_event', 'domain_events', 'clear_events', '__init__', 'get', '__init__', 'get', 'post', '__init__', 'post'], 'classes': ['Event', 'EventMixin', 'Handler', 'AsyncHandler', 'EventHandlerProvider', 'AsyncEventHandlerProvider', 'EventBus', 'InjectorEventBus'], 'interfaces': [], 'imports': ['abc', 'typing', 'injector'], 'calls': [['TypeVar', 6], ['type', 94], ['isinstance', 98], ['handler', 100], ['type', 103], ['isinstance', 107]], 'call_map': {'TypeVar': [6], '__init__': [], '_record_event': [], 'domain_events': [], 'clear_events': [], 'get': [], 'post': [], 'type': [94, 103], 'isinstance': [98, 107], 'handler': [100]}}",call_map,h,,a
"{'language': 'python', 'functions': ['method_dispatch', 'wrapper'], 'classes': [], 'interfaces': [], 'imports': ['functools', 'typing'], 'calls': [], 'call_map': {'method_dispatch': [], 'wrapper': []}}",call_map,m,,e
"{'language': 'python', 'functions': ['method_dispatch', 'wrapper'], 'classes': [], 'interfaces': [], 'imports': ['functools', 'typing'], 'calls': [], 'call_map': {'method_dispatch': [], 'wrapper': []}}",call_map,w,,r
"{'language': 'python', 'functions': ['__enter__', '__exit__'], 'classes': ['AlreadyLocked', 'Lock'], 'interfaces': [], 'imports': ['types', 'typing', 'typing_extensions'], 'calls': [], 'call_map': {'__enter__': [], '__exit__': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__enter__', '__exit__'], 'classes': ['AlreadyLocked', 'Lock'], 'interfaces': [], 'imports': ['types', 'typing', 'typing_extensions'], 'calls': [], 'call_map': {'__enter__': [], '__exit__': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,T,,y
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,_,,e
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,h,,a
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,t,,y
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,E,,x
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,_,,d
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,g,,e
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,s,,t
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,f,,r
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,i,,s
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,d,,a
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,t,,o
"{'language': 'python', 'functions': ['_extract_type_if_optional', '_deserialize_dt', 'from_json', 'to_json'], 'classes': ['Dataclass'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'json', 'typing', 'uuid', 'typing_extensions', 'foundation.value_objects', 'foundation.value_objects.factories'], 'calls': [['TypeVar', 13], ['hasattr', 23], ['type', 23], ['Exception', 28], ['get_dollars', 42], ['str', 51], ['_extract_type_if_optional', 59], ['issubclass', 61], ['Exception', 64], ['dataclass', 71], ['type', 76], ['_extract_type_if_optional', 77], ['issubclass', 79], ['Exception', 82], ['getattr', 84], ['getattr', 85]], 'call_map': {'TypeVar': [13], '_extract_type_if_optional': [59, 77], 'hasattr': [23], 'type': [23, 76], 'Exception': [28, 64, 82], '_deserialize_dt': [], 'get_dollars': [42], 'str': [51], 'from_json': [], 'issubclass': [61, 79], 'dataclass': [71], 'to_json': [], 'getattr': [84, 85]}}",call_map,g,,e
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,i,,s
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,V,,a
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,D,,e
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,c,,u
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,a,,m
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,i,,s
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,T,,y
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,M,,o
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,r,,e
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'currency', 'amount', '__eq__', '__lt__', '__add__', '__sub__', '__repr__', '__str__', '__hash__'], 'classes': ['Money'], 'interfaces': [], 'imports': ['decimal', 'functools', 'inspect', 'typing', 'foundation.value_objects.currency'], 'calls': [['issubclass', 12], ['ValueError', 13], ['Decimal', 15], ['ValueError', 17], ['ValueError', 21], ['ValueError', 23], ['isinstance', 40], ['isinstance', 45], ['TypeError', 46], ['TypeError', 48], ['isinstance', 53], ['Money', 55], ['isinstance', 58], ['Money', 60], ['repr', 63], ['hash', 69]], 'call_map': {'__init__': [], 'issubclass': [12], 'ValueError': [13, 17, 21, 23], 'Decimal': [15], 'currency': [], 'amount': [], '__eq__': [], 'isinstance': [40, 45, 53, 58], '__lt__': [], 'TypeError': [46, 48], '__add__': [], 'Money': [55, 60], '__sub__': [], '__repr__': [], 'repr': [63], '__str__': [], '__hash__': [], 'hash': [69]}}",call_map,h,,a
"{'language': 'python', 'functions': ['get_dollars'], 'classes': [], 'interfaces': [], 'imports': ['decimal', 'typing', 'foundation.value_objects'], 'calls': [['Money', 8]], 'call_map': {'get_dollars': [], 'Money': [8]}}",call_map,g,,e
"{'language': 'python', 'functions': ['get_dollars'], 'classes': [], 'interfaces': [], 'imports': ['decimal', 'typing', 'foundation.value_objects'], 'calls': [['Money', 8]], 'call_map': {'get_dollars': [], 'Money': [8]}}",call_map,M,,o
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,M,,o
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,r,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,s,,t
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,c,,m
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,m,,a
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,D,,e
"{'language': 'python', 'functions': ['test_invalid_inputs', 'test_valid_inputs', 'test_repr', 'test_str', 'test_equality', 'test_lt_the_same_currency', 'test_lt_different_currency', 'test_supports_different_comparison_operators', 'test_supports_basic_math_operators_if_the_same_currency', 'test_normalizes_whenever_it_can'], 'classes': ['BTC'], 'interfaces': [], 'imports': ['decimal', 'operator', 'typing', 'pytest', 'foundation.value_objects', 'foundation.value_objects.currency'], 'calls': [['Money', 19], ['Money', 24], ['Money', 30], ['Money', 31], ['repr', 35], ['Money', 39], ['Money', 39], ['str', 42], ['Money', 48], ['Money', 48], ['Money', 49], ['Money', 49], ['Money', 50], ['Money', 50], ['Money', 51], ['Money', 51], ['Money', 59], ['Money', 59], ['Money', 64], ['Money', 64], ['Money', 70], ['Money', 70], ['Money', 71], ['Money', 71], ['Money', 72], ['Money', 72], ['Money', 73], ['Money', 73], ['cmp_operator', 79], ['Money', 85], ['Money', 85], ['Money', 85], ['Money', 86], ['Money', 86], ['Money', 86], ['math_operator', 92], ['Money', 96], ['Decimal', 96], ['Money', 96], ['Money', 99]], 'call_map': {'test_invalid_inputs': [], 'Money': [19, 24, 30, 31, 39, 39, 48, 48, 49, 49, 50, 50, 51, 51, 59, 59, 64, 64, 70, 70, 71, 71, 72, 72, 73, 73, 85, 85, 85, 86, 86, 86, 96, 96, 99], 'test_valid_inputs': [], 'test_repr': [], 'repr': [35], 'test_str': [], 'str': [42], 'test_equality': [], 'test_lt_the_same_currency': [], 'test_lt_different_currency': [], 'test_supports_different_comparison_operators': [], 'cmp_operator': [79], 'test_supports_basic_math_operators_if_the_same_currency': [], 'math_operator': [92], 'Decimal': [96], 'test_normalizes_whenever_it_can': []}}",call_map,t,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call_map,T,,y
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call_map,T,,a
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call_map,C,,o
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call_map,c,,a
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['ProcessManagerDataRepo'], 'interfaces': [], 'imports': ['json', 'typing', 'uuid', 'sqlalchemy', 'sqlalchemy.engine', 'foundation', 'db_infrastructure'], 'calls': [['TypeVar', 12], ['Table', 15], ['Column', 16], ['Column', 16], ['cast', 28]], 'call_map': {'TypeVar': [12], 'Table': [15], 'Column': [16, 16], '__init__': [], 'get': [], 'cast': [28], 'save': []}}",call_map,s,,a
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call_map,g,,e
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call_map,P,,a
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call_map,g,,e
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call_map,P,,r
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call_map,c,,o
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call_map,i,,s
"{'language': 'python', 'functions': ['__call__', 'get_paying_for_won_item', 'get_data_repo', 'configure'], 'classes': ['Handler', 'ProcessManager', 'Processes'], 'interfaces': [], 'imports': ['typing', 'injector', 'sqlalchemy.engine', 'typing_extensions', 'foundation.events', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItem', 40], ['ProcessManagerDataRepo', 44], ['issubclass', 48], ['AsyncEventHandlerProvider', 50]], 'call_map': {'__call__': [], 'get_paying_for_won_item': [], 'PayingForWonItem': [40], 'get_data_repo': [], 'ProcessManagerDataRepo': [44], 'configure': [], 'issubclass': [48], 'AsyncEventHandlerProvider': [50]}}",call_map,A,,s
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,m,,o
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,p,,a
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,M,,o
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,c,,u
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,p,,m
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,P,,a
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,p,,r
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,P,,a
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,A,,u
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,t,,i
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,p,,m
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,P,,a
"{'language': 'python', 'functions': ['mocked_uuid4', 'payments_facade_mock', 'customer_relationship_mock', 'pm_data', 'process_manager', 'test_should_start_new_payment_upon_auction_ended', 'pm_data_waiting_for_payment', 'test_should_send_success_email_after_payment', 'test_should_timeout'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'uuid', 'freezegun', 'pytest', 'foundation.value_objects.factories', 'auctions', 'customer_relationship', 'payments', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga'], 'calls': [['Mock', 27], ['Mock', 32], ['PayingForWonItemData', 37], ['PayingForWonItem', 42], ['AuctionEnded', 53], ['get_dollars', 53], ['timedelta', 65], ['PayingForWonItemData', 72], ['timedelta', 73], ['get_dollars', 73], ['PaymentCaptured', 83], ['timedelta', 99]], 'call_map': {'mocked_uuid4': [], 'payments_facade_mock': [], 'Mock': [27, 32], 'customer_relationship_mock': [], 'pm_data': [], 'PayingForWonItemData': [37, 72], 'process_manager': [], 'PayingForWonItem': [42], 'test_should_start_new_payment_upon_auction_ended': [], 'AuctionEnded': [53], 'get_dollars': [53, 73], 'timedelta': [65, 73, 99], 'pm_data_waiting_for_payment': [], 'test_should_send_success_email_after_payment': [], 'PaymentCaptured': [83], 'test_should_timeout': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,d,,a
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,s,,q
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,s,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,r,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,P,,r
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,P,,a
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,U,,U
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,g,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,u,,u
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'repo', 'test_saving_and_reading'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'json', 'uuid', 'pytest', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'db_infrastructure', 'processes.paying_for_won_item', 'processes.paying_for_won_item.saga', 'processes.repository'], 'calls': [['datetime', 15], ['ProcessManagerDataRepo', 30], ['PayingForWonItemData', 37], ['UUID', 37], ['PayingForWonItemData', 49], ['UUID', 50], ['get_dollars', 53], ['uuid4', 73], ['type', 77]], 'call_map': {'datetime': [15], 'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'repo': [], 'ProcessManagerDataRepo': [30], 'PayingForWonItemData': [37, 49], 'UUID': [37, 50], 'get_dollars': [53], 'test_saving_and_reading': [], 'uuid4': [73], 'type': [77]}}",call_map,t,,y
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",call_map,h,,a
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",call_map,h,,a
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",call_map,P,,a
"{'language': 'python', 'functions': ['__init__', '__call__', 'handle_payment_captured', 'handle_beginning', '_run_process_manager'], 'classes': ['PayingForWonItemHandler'], 'interfaces': [], 'imports': ['uuid', 'injector', 'foundation.events', 'foundation.locks', 'foundation.method_dispatch', 'auctions', 'payments', 'processes.paying_for_won_item', 'processes.repository'], 'calls': [['PayingForWonItemData', 38]], 'call_map': {'__init__': [], '__call__': [], 'handle_payment_captured': [], 'handle_beginning': [], 'PayingForWonItemData': [38], '_run_process_manager': []}}",call_map,_,,r
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",call_map,t,,i
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",call_map,h,,a
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",call_map,E,,x
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",call_map,h,,a
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",call_map,t,,i
"{'language': 'python', 'functions': ['__init__', 'timeout', 'handle', 'handle_auction_ended', 'handle_payment_captured'], 'classes': ['State', 'PayingForWonItemData', 'PayingForWonItem'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'enum', 'typing', 'uuid', 'foundation.method_dispatch', 'foundation.value_objects', 'auctions', 'customer_relationship', 'payments'], 'calls': [['Exception', 44], ['timedelta', 56]], 'call_map': {'__init__': [], 'timeout': [], 'handle': [], 'Exception': [44], 'handle_auction_ended': [], 'timedelta': [56], 'handle_payment_captured': []}}",call_map,h,,a
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",call_map,f,,a
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",call_map,C,,u
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",call_map,c,,o
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",call_map,A,,s
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['facade', 'configure', '__init__', '__call__', '__init__', '__call__'], 'classes': ['CustomerRelationship', 'BidderHasBeenOverbidHandler', 'WinningBidPlacedHandler'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'customer_relationship.config', 'customer_relationship.facade', 'customer_relationship.models'], 'calls': [['CustomerRelationshipFacade', 25], ['AsyncEventHandlerProvider', 28], ['AsyncEventHandlerProvider', 29]], 'call_map': {'facade': [], 'CustomerRelationshipFacade': [25], 'configure': [], 'AsyncEventHandlerProvider': [28, 29], '__init__': [], '__call__': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call_map,E,,m
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call_map,c,,r
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call_map,u,,p
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call_map,s,,e
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call_map,s,,e
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call_map,s,,e
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call_map,_,,g
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call_map,d,,i
"{'language': 'python', 'functions': ['__init__', 'create_customer', 'update_customer', 'send_email_about_overbid', 'send_email_about_winning', 'send_email_after_successful_payment', '_get_customer', '_send'], 'classes': ['CustomerRelationshipFacade'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy.engine', 'foundation.value_objects', 'customer_relationship', 'customer_relationship.config', 'customer_relationship.email_sender', 'customer_relationship.models'], 'calls': [['EmailSender', 15], ['dict', 40]], 'call_map': {'__init__': [], 'EmailSender': [15], 'create_customer': [], 'update_customer': [], 'send_email_about_overbid': [], 'send_email_about_winning': [], 'send_email_after_successful_payment': [], '_get_customer': [], 'dict': [40], '_send': []}}",call_map,_,,s
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",call_map,s,,e
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",call_map,M,,I
"{'language': 'python', 'functions': ['__init__', 'send'], 'classes': ['EmailSender'], 'interfaces': [], 'imports': ['email.mime.multipart', 'email.mime.text', 'smtplib', 'customer_relationship.config', 'customer_relationship.emails'], 'calls': [['MIMEMultipart', 16], ['MIMEText', 20], ['MIMEText', 21]], 'call_map': {'__init__': [], 'send': [], 'MIMEMultipart': [16], 'MIMEText': [20, 21]}}",call_map,M,,I
"{'language': 'python', 'functions': ['formatted_from'], 'classes': ['CustomerRelationshipConfig'], 'interfaces': [], 'imports': ['dataclasses', 'typing'], 'calls': [['dataclass', 5]], 'call_map': {'dataclass': [5], 'formatted_from': []}}",call_map,d,,a
"{'language': 'python', 'functions': ['formatted_from'], 'classes': ['CustomerRelationshipConfig'], 'interfaces': [], 'imports': ['dataclasses', 'typing'], 'calls': [['dataclass', 5]], 'call_map': {'dataclass': [5], 'formatted_from': []}}",call_map,f,,o
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 6], ['Column', 6], ['String', 6]], 'call_map': {'Table': [5], 'Column': [6, 6], 'String': [6]}}",call_map,T,,a
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 6], ['Column', 6], ['String', 6]], 'call_map': {'Table': [5], 'Column': [6, 6], 'String': [6]}}",call_map,C,,o
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 6], ['Column', 6], ['String', 6]], 'call_map': {'Table': [5], 'Column': [6, 6], 'String': [6]}}",call_map,S,,t
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",call_map,t,,i
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",call_map,h,,t
"{'language': 'python', 'functions': ['title', 'html', 'text', 'title', 'text', 'html', 'title', 'text', 'html', 'title', 'text', 'html'], 'classes': ['Email', 'Overbid', 'Winning', 'PaymentSuccessful'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects'], 'calls': [], 'call_map': {'title': [], 'html': [], 'text': []}}",call_map,t,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",call_map,g,,e
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",call_map,S,,q
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",call_map,g,,e
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",call_map,S,,q
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",call_map,a,,u
"{'language': 'python', 'functions': ['get_active_auctions', 'get_single_auction', 'auctions_repo'], 'classes': ['AuctionsInfrastructure'], 'interfaces': [], 'imports': ['injector', 'sqlalchemy.engine', 'foundation.events', 'auctions', 'auctions_infrastructure.models', 'auctions_infrastructure.queries', 'auctions_infrastructure.repositories'], 'calls': [['SqlGetActiveAuctions', 23], ['SqlGetSingleAuction', 27], ['SqlAlchemyAuctionsRepo', 31]], 'call_map': {'get_active_auctions': [], 'SqlGetActiveAuctions': [23], 'get_single_auction': [], 'SqlGetSingleAuction': [27], 'auctions_repo': [], 'SqlAlchemyAuctionsRepo': [31]}}",call_map,S,,q
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call_map,T,,a
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call_map,C,,o
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call_map,S,,t
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure'], 'calls': [['Table', 5], ['Column', 8], ['Column', 9], ['String', 9], ['Column', 10], ['Column', 11], ['Column', 12], ['Column', 13], ['Table', 17], ['Column', 20], ['Column', 21], ['Column', 22], ['Column', 23], ['ForeignKey', 23]], 'call_map': {'Table': [5, 17], 'Column': [8, 9, 10, 11, 12, 13, 20, 21, 22, 23], 'String': [9], 'ForeignKey': [23]}}",call_map,F,,o
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",call_map,e,,n
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",call_map,t,,i
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",call_map,p,,a
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",call_map,e,,v
"{'language': 'python', 'functions': ['ends_at', 'past_date', 'event_bus_mock'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'pytz', 'foundation.events'], 'calls': [['timedelta', 12], ['timedelta', 17], ['Mock', 22]], 'call_map': {'ends_at': [], 'timedelta': [12, 17], 'past_date': [], 'event_bus_mock': [], 'Mock': [22]}}",call_map,M,,o
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,s,,q
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,s,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,w,,i
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,D,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,b,,i
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,a,,n
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,e,,x
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,a,,u
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,b,,i
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,S,,q
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,g,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,s,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,B,,i
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,A,,u
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,s,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,_,,_
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,p,,o
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,e,,v
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,E,,v
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,t,,e
"{'language': 'python', 'functions': ['sqlalchemy_connect_url', 'setup_teardown_tables', 'winning_bid_amount', 'bidder_id', 'another_bidder_id', 'expired_auction', 'auction_model_with_a_bid', 'bid_model', 'test_gets_existing_auction', 'test_saves_auction_changes', 'test_removes_withdrawn_bids', 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus', '__init__', 'post', 'event_bus_stub', 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents'], 'classes': ['EventBusStub'], 'interfaces': [], 'imports': ['datetime', 'decimal', 'unittest.mock', 'pytest', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions_infrastructure', 'auctions_infrastructure.repositories', 'db_infrastructure'], 'calls': [['Decimal', 30], ['Decimal', 50], ['Decimal', 51], ['SqlAlchemyAuctionsRepo', 93], ['get_dollars', 97], ['get_dollars', 98], ['set', 100], ['Bid', 100], ['get_dollars', 100], ['get_dollars', 112], ['Auction', 113], ['get_dollars', 116], ['Bid', 119], ['get_dollars', 119], ['Bid', 120], ['SqlAlchemyAuctionsRepo', 125], ['select', 127], ['select', 128], ['Auction', 137], ['get_dollars', 140], ['Bid', 142], ['get_dollars', 142], ['SqlAlchemyAuctionsRepo', 147], ['select', 149], ['SqlAlchemyAuctionsRepo', 156], ['get_dollars', 158], ['EventBusStub', 175], ['SqlAlchemyAuctionsRepo', 182], ['get_dollars', 184], ['len', 188]], 'call_map': {'sqlalchemy_connect_url': [], 'setup_teardown_tables': [], 'winning_bid_amount': [], 'Decimal': [30, 50, 51], 'bidder_id': [], 'another_bidder_id': [], 'expired_auction': [], 'auction_model_with_a_bid': [], 'bid_model': [], 'test_gets_existing_auction': [], 'SqlAlchemyAuctionsRepo': [93, 125, 147, 156, 182], 'get_dollars': [97, 98, 100, 112, 116, 119, 140, 142, 158, 184], 'set': [100], 'Bid': [100, 119, 120, 142], 'test_saves_auction_changes': [], 'Auction': [113, 137], 'select': [127, 128, 149], 'test_removes_withdrawn_bids': [], 'test_AuctionsRepo_UponSavingAuction_PostsPendingEventsViaEventBus': [], '__init__': [], 'post': [], 'event_bus_stub': [], 'EventBusStub': [175], 'test_AuctionsRepo_UponSavingAuction_ClearsPendingEvents': [], 'len': [188]}}",call_map,l,,e
"{'language': 'python', 'functions': ['__init__'], 'classes': ['SqlQuery'], 'interfaces': [], 'imports': ['sqlalchemy.engine'], 'calls': [], 'call_map': {'__init__': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",call_map,q,,u
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",call_map,_,,r
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",call_map,A,,u
"{'language': 'python', 'functions': ['query', 'query', '_row_to_dto'], 'classes': ['SqlGetActiveAuctions', 'SqlGetSingleAuction'], 'interfaces': [], 'imports': ['typing', 'sqlalchemy', 'sqlalchemy.engine', 'foundation.value_objects.factories', 'auctions.application.queries', 'auctions_infrastructure', 'auctions_infrastructure.queries.base'], 'calls': [['_row_to_dto', 16], ['_row_to_dto', 23], ['AuctionDto', 27], ['get_dollars', 30], ['get_dollars', 31]], 'call_map': {'query': [], '_row_to_dto': [16, 23], 'AuctionDto': [27], 'get_dollars': [30, 31]}}",call_map,g,,e
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call_map,g,,e
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call_map,E,,x
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call_map,_,,r
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call_map,B,,i
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call_map,g,,e
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call_map,A,,u
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call_map,s,,a
"{'language': 'python', 'functions': ['__init__', 'get', '_row_to_entity', 'save'], 'classes': ['SqlAlchemyAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'pytz', 'sqlalchemy.engine', 'foundation.events', 'foundation.value_objects.factories', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects', 'auctions_infrastructure'], 'calls': [['Exception', 23], ['Bid', 29], ['get_dollars', 29], ['Auction', 30], ['get_dollars', 33], ['dict', 49]], 'call_map': {'__init__': [], 'get': [], 'Exception': [23], '_row_to_entity': [], 'Bid': [29], 'get_dollars': [29, 33], 'Auction': [30], 'save': [], 'dict': [49]}}",call_map,d,,i
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': ['address_repo'], 'classes': ['ShippingInfrastructure'], 'interfaces': [], 'imports': ['injector', 'shipping', 'shipping_infrastructure.models', 'shipping_infrastructure.repositories'], 'calls': [['FakeAddressRepository', 25]], 'call_map': {'address_repo': [], 'FakeAddressRepository': [25]}}",call_map,a,,d
"{'language': 'python', 'functions': ['address_repo'], 'classes': ['ShippingInfrastructure'], 'interfaces': [], 'imports': ['injector', 'shipping', 'shipping_infrastructure.models', 'shipping_infrastructure.repositories'], 'calls': [['FakeAddressRepository', 25]], 'call_map': {'address_repo': [], 'FakeAddressRepository': [25]}}",call_map,F,,a
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call_map,T,,a
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call_map,C,,o
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call_map,S,,t
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['sqlalchemy', 'db_infrastructure', 'shipping.domain.value_objects'], 'calls': [['Table', 6], ['Column', 9], ['Column', 10], ['String', 10], ['Column', 11], ['Column', 12], ['String', 12], ['Column', 13], ['String', 13], ['Column', 14], ['String', 14], ['Column', 15], ['String', 15], ['Column', 16], ['String', 16], ['Column', 17], ['String', 17], ['Column', 18], ['Enum', 18]], 'call_map': {'Table': [6], 'Column': [9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 'String': [10, 12, 13, 14, 15, 16, 17], 'Enum': [18]}}",call_map,E,,n
"{'language': 'python', 'functions': ['get'], 'classes': ['FakeAddressRepository'], 'interfaces': [], 'imports': ['uuid', 'faker', 'shipping', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [['Address', 13]], 'call_map': {'get': [], 'Address': [13]}}",call_map,g,,e
"{'language': 'python', 'functions': ['get'], 'classes': ['FakeAddressRepository'], 'interfaces': [], 'imports': ['uuid', 'faker', 'shipping', 'shipping.domain.entities', 'shipping.domain.value_objects'], 'calls': [['Address', 13]], 'call_map': {'get': [], 'Address': [13]}}",call_map,A,,d
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call_map,M,,e
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call_map,d,,e
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call_map,l,,o
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call_map,U,,U
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call_map,C,,H
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call_map,p,,r
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call_map,s,,t
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call_map,i,,s
"{'language': 'python', 'functions': ['load_dialect_impl', 'process_bind_param', 'process_result_value'], 'classes': ['GUID'], 'interfaces': [], 'imports': ['typing', 'uuid', 'sqlalchemy', 'sqlalchemy.dialects.postgresql', 'sqlalchemy.ext.declarative', 'sqlalchemy.types'], 'calls': [['MetaData', 9], ['declarative_base', 10], ['UUID', 26], ['CHAR', 28], ['str', 34], ['isinstance', 36], ['isinstance', 46]], 'call_map': {'MetaData': [9], 'declarative_base': [10], 'load_dialect_impl': [], 'UUID': [26], 'CHAR': [28], 'process_bind_param': [], 'str': [34], 'isinstance': [36, 46], 'process_result_value': []}}",call_map,p,,r
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call_map,p,,l
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call_map,P,,l
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call_map,w,,i
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call_map,W,,i
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call_map,e,,n
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call_map,E,,n
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call_map,b,,e
"{'language': 'python', 'functions': ['placing_bid_uc', 'withdrawing_bids_uc', 'ending_auction_uc', 'beginning_auction_uc'], 'classes': ['Auctions'], 'interfaces': [], 'imports': ['injector', 'auctions.application.queries', 'auctions.application.repositories', 'auctions.application.use_cases', 'auctions.domain.events', 'auctions.domain.value_objects'], 'calls': [['PlacingBid', 55], ['WithdrawingBids', 59], ['EndingAuction', 63], ['BeginningAuction', 67]], 'call_map': {'placing_bid_uc': [], 'PlacingBid': [55], 'withdrawing_bids_uc': [], 'WithdrawingBids': [59], 'ending_auction_uc': [], 'EndingAuction': [63], 'beginning_auction_uc': [], 'BeginningAuction': [67]}}",call_map,B,,e
"{'language': 'python', 'functions': [], 'classes': ['BidderHasBeenOverbid', 'WinningBidPlaced', 'AuctionEnded', 'AuctionBegan'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 10], ['dataclass', 18], ['dataclass', 26], ['dataclass', 34]], 'call_map': {'dataclass': [10, 18, 26, 34]}}",call_map,d,,a
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,s,,u
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,s,,o
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,p,,l
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,B,,i
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,W,,i
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,B,,i
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,_,,s
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,c,,u
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,w,,i
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,_,,h
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,w,,i
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,w,,i
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,e,,n
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,A,,u
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,c,,r
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,A,,u
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,A,,u
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,i,,s
"{'language': 'python', 'functions': ['__init__', 'place_bid', '_should_end', 'current_price', 'winners', '_highest_bid', 'withdraw_bids', 'withdrawn_bids_ids', 'end_auction', 'create', '__str__', '__eq__'], 'classes': ['Auction'], 'interfaces': [], 'imports': ['datetime', 'typing', 'foundation.events', 'foundation.value_objects', 'auctions.domain.entities.bid', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [['super', 17], ['sorted', 21], ['Bid', 32], ['WinningBidPlaced', 33], ['BidderHasBeenOverbid', 35], ['AuctionEnded', 77], ['Auction', 81], ['AuctionBegan', 82], ['isinstance', 89], ['vars', 89], ['vars', 89]], 'call_map': {'__init__': [], 'super': [17], 'sorted': [21], 'place_bid': [], 'Bid': [32], 'WinningBidPlaced': [33], 'BidderHasBeenOverbid': [35], '_should_end': [], 'current_price': [], 'winners': [], '_highest_bid': [], 'withdraw_bids': [], 'withdrawn_bids_ids': [], 'end_auction': [], 'AuctionEnded': [77], 'create': [], 'Auction': [81], 'AuctionBegan': [82], '__str__': [], '__eq__': [], 'isinstance': [89], 'vars': [89, 89]}}",call_map,v,,a
"{'language': 'python', 'functions': [], 'classes': ['Bid'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'foundation.value_objects', 'auctions.domain.value_objects'], 'calls': [['dataclass', 9]], 'call_map': {'dataclass': [9]}}",call_map,d,,a
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,p,,r
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,o,,u
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,P,,l
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,a,,u
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,A,,u
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,a,,u
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,a,,u
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,e,,v
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,M,,o
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,a,,u
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,I,,n
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,p,,l
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,P,,l
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,b,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,B,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,t,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,P,,l
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,g,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,P,,l
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,t,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,t,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,t,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,t,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,W,,i
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,t,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,t,,i
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,B,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,c,,a
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,B,,i
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,t,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,t,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,t,,e
"{'language': 'python', 'functions': ['__init__', 'present', 'output_boundary', 'auction', 'auction_id', 'auction_title', 'event_bus', 'auctions_repo', 'place_bid_uc', 'beginning_auction_uc', 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning', 'test_Auction_BidLowerThanCurrentPrice_IsLosing', 'test_Auction_Overbid_IsWinning', 'test_Auction_OverbidByWinner_IsWinning', 'test_Auction_FirstBid_EmitsEvent', 'test_Auction_OverbidFromOtherBidder_EmitsEvents', 'test_Auction_OverbidFromOtherBidder_EmitsEvent', 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly', 'test_PlacingBid_BiddingOnEndedAuction_RaisesException'], 'classes': ['PlacingBidOutputBoundaryFake'], 'interfaces': [], 'imports': ['datetime', 'typing', 'unittest.mock', 'freezegun', 'pytest', 'pytz', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.repositories', 'auctions.application.use_cases.beginning_auction', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects', 'auctions.tests.factories', 'auctions.tests.in_memory_repo'], 'calls': [['PlacingBidOutputBoundaryFake', 33], ['AuctionFactory', 38], ['Mock', 53], ['InMemoryAuctionsRepo', 58], ['PlacingBid', 66], ['BeginningAuction', 71], ['PlacingBidInputDto', 77], ['get_dollars', 77], ['PlacingBidOutputDto', 79], ['get_dollars', 79], ['PlacingBidInputDto', 86], ['get_dollars', 86], ['PlacingBidOutputDto', 88], ['get_dollars', 88], ['PlacingBidInputDto', 94], ['get_dollars', 94], ['PlacingBidInputDto', 96], ['get_dollars', 96], ['PlacingBidOutputDto', 98], ['get_dollars', 98], ['PlacingBidInputDto', 104], ['get_dollars', 104], ['PlacingBidInputDto', 106], ['get_dollars', 106], ['PlacingBidOutputDto', 108], ['get_dollars', 108], ['PlacingBidInputDto', 114], ['get_dollars', 114], ['WinningBidPlaced', 116], ['get_dollars', 116], ['timedelta', 124], ['BeginningAuctionInputDto', 125], ['get_dollars', 125], ['PlacingBidInputDto', 126], ['get_dollars', 126], ['PlacingBidInputDto', 129], ['get_dollars', 129], ['call', 133], ['WinningBidPlaced', 133], ['get_dollars', 133], ['call', 134], ['BidderHasBeenOverbid', 134], ['get_dollars', 134], ['PlacingBidInputDto', 144], ['get_dollars', 144], ['PlacingBidInputDto', 147], ['get_dollars', 147], ['call', 151], ['WinningBidPlaced', 151], ['get_dollars', 151], ['call', 152], ['BidderHasBeenOverbid', 152], ['get_dollars', 152], ['PlacingBidInputDto', 162], ['get_dollars', 162], ['PlacingBidInputDto', 165], ['get_dollars', 165], ['WinningBidPlaced', 167], ['get_dollars', 167], ['timedelta', 173], ['freeze_time', 174], ['BeginningAuctionInputDto', 176], ['get_dollars', 176], ['timedelta', 176], ['PlacingBidInputDto', 180], ['get_dollars', 180]], 'call_map': {'__init__': [], 'present': [], 'output_boundary': [], 'PlacingBidOutputBoundaryFake': [33], 'auction': [], 'AuctionFactory': [38], 'auction_id': [], 'auction_title': [], 'event_bus': [], 'Mock': [53], 'auctions_repo': [], 'InMemoryAuctionsRepo': [58], 'place_bid_uc': [], 'PlacingBid': [66], 'beginning_auction_uc': [], 'BeginningAuction': [71], 'test_Auction_FirstBidHigherThanIntialPrice_IsWinning': [], 'PlacingBidInputDto': [77, 86, 94, 96, 104, 106, 114, 126, 129, 144, 147, 162, 165, 180], 'get_dollars': [77, 79, 86, 88, 94, 96, 98, 104, 106, 108, 114, 116, 125, 126, 129, 133, 134, 144, 147, 151, 152, 162, 165, 167, 176, 180], 'PlacingBidOutputDto': [79, 88, 98, 108], 'test_Auction_BidLowerThanCurrentPrice_IsLosing': [], 'test_Auction_Overbid_IsWinning': [], 'test_Auction_OverbidByWinner_IsWinning': [], 'test_Auction_FirstBid_EmitsEvent': [], 'WinningBidPlaced': [116, 133, 151, 167], 'test_Auction_OverbidFromOtherBidder_EmitsEvents': [], 'timedelta': [124, 173, 176], 'BeginningAuctionInputDto': [125, 176], 'call': [133, 134, 151, 152], 'BidderHasBeenOverbid': [134, 152], 'test_Auction_OverbidFromOtherBidder_EmitsEvent': [], 'test_Auction_OverbidFromWinner_EmitsWinningBidEventOnly': [], 'test_PlacingBid_BiddingOnEndedAuction_RaisesException': [], 'freeze_time': [174]}}",call_map,f,,r
"{'language': 'python', 'functions': [], 'classes': ['AuctionFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'foundation.value_objects.factories', 'auctions.domain.entities'], 'calls': [['get_dollars', 15]], 'call_map': {'get_dollars': [15]}}",call_map,g,,e
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,e,,v
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,M,,o
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,r,,e
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,I,,n
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,b,,e
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,B,,e
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,B,,e
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,t,,i
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,A,,u
"{'language': 'python', 'functions': ['event_bus_mock', 'repo', 'beginning_auction_uc', 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent', 'test_BeginningAuction_EndsAtInThePast_raisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'unittest.mock', 'pytest', 'foundation.events', 'foundation.value_objects.factories', 'auctions', 'auctions.application.use_cases.beginning_auction', 'auctions.domain.exceptions', 'auctions.tests.in_memory_repo'], 'calls': [['Mock', 17], ['InMemoryAuctionsRepo', 22], ['BeginningAuction', 27], ['BeginningAuctionInputDto', 33], ['get_dollars', 33], ['timedelta', 33], ['AuctionBegan', 36], ['get_dollars', 36], ['timedelta', 40], ['BeginningAuctionInputDto', 42], ['get_dollars', 42]], 'call_map': {'event_bus_mock': [], 'Mock': [17], 'repo': [], 'InMemoryAuctionsRepo': [22], 'beginning_auction_uc': [], 'BeginningAuction': [27], 'test_BeginningAuction_SocksFor10DollarsEndingInFuture_emitsEvent': [], 'BeginningAuctionInputDto': [33, 42], 'get_dollars': [33, 36, 42], 'timedelta': [33, 40], 'AuctionBegan': [36], 'test_BeginningAuction_EndsAtInThePast_raisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['__init__', 'get', 'save'], 'classes': ['InMemoryAuctionsRepo'], 'interfaces': [], 'imports': ['typing', 'foundation.events', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'get': [], 'save': []}}",call_map,s,,a
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,y,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,i
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,A,,u
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,B,,i
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,B,,i
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,W,,i
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,A,,u
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['yesterday', 'test_should_use_starting_price_as_current_price_for_empty_bids_list', 'test_should_return_highest_bid_for_current_price', 'test_should_return_no_winners_for_empty_bids_list', 'test_should_return_highest_bids_user_id_for_winners_list', 'test_should_win_auction_if_is_the_only_bidder_above_starting_price', 'test_should_not_be_winning_auction_if_bids_below_starting_price', 'test_should_withdraw_the_only_bid', 'test_should_add_withdrawn_bids_ids_to_separate_list', 'test_should_not_be_winning_if_bid_lower_than_current_price', 'test_should_not_allow_placing_bids_for_ended_auction', 'test_should_emit_event_upon_overbid', 'test_should_emit_winning_event_if_the_first_offer', 'test_should_emit_winning_if_overbids', 'test_should_emit_auction_ended', 'test_should_emit_event_with_none_winner_if_no_winners', 'test_should_raise_if_auction_has_not_been_ended', 'test_EndedAuction_PlacingBid_RaisesException', 'test_EndedAuction_Ending_RaisesException'], 'classes': [], 'interfaces': [], 'imports': ['datetime', 'pytest', 'foundation.value_objects.factories', 'auctions.domain.entities', 'auctions.domain.events', 'auctions.domain.exceptions', 'auctions.tests.factories'], 'calls': [['timedelta', 15], ['AuctionFactory', 19], ['AuctionFactory', 25], ['Bid', 26], ['get_dollars', 26], ['Bid', 26], ['get_dollars', 26], ['get_dollars', 29], ['AuctionFactory', 33], ['AuctionFactory', 39], ['Bid', 41], ['get_dollars', 41], ['Bid', 42], ['get_dollars', 42], ['Bid', 43], ['get_dollars', 43], ['AuctionFactory', 51], ['get_dollars', 53], ['AuctionFactory', 59], ['get_dollars', 61], ['AuctionFactory', 67], ['Bid', 67], ['get_dollars', 67], ['AuctionFactory', 76], ['Bid', 76], ['get_dollars', 76], ['AuctionFactory', 84], ['Bid', 84], ['get_dollars', 84], ['get_dollars', 87], ['AuctionFactory', 93], ['get_dollars', 96], ['Bid', 100], ['get_dollars', 100], ['AuctionFactory', 101], ['get_dollars', 103], ['BidderHasBeenOverbid', 106], ['AuctionFactory', 111], ['get_dollars', 112], ['WinningBidPlaced', 116], ['AuctionFactory', 120], ['Bid', 120], ['get_dollars', 120], ['get_dollars', 121], ['WinningBidPlaced', 125], ['BidderHasBeenOverbid', 126], ['AuctionFactory', 131], ['Bid', 131], ['get_dollars', 131], ['AuctionEnded', 135], ['AuctionFactory', 140], ['AuctionEnded', 144], ['AuctionFactory', 149], ['AuctionFactory', 156], ['get_dollars', 160], ['AuctionFactory', 164]], 'call_map': {'yesterday': [], 'timedelta': [15], 'test_should_use_starting_price_as_current_price_for_empty_bids_list': [], 'AuctionFactory': [19, 25, 33, 39, 51, 59, 67, 76, 84, 93, 101, 111, 120, 131, 140, 149, 156, 164], 'test_should_return_highest_bid_for_current_price': [], 'Bid': [26, 26, 41, 42, 43, 67, 76, 84, 100, 120, 131], 'get_dollars': [26, 26, 29, 41, 42, 43, 53, 61, 67, 76, 84, 87, 96, 100, 103, 112, 120, 121, 131, 160], 'test_should_return_no_winners_for_empty_bids_list': [], 'test_should_return_highest_bids_user_id_for_winners_list': [], 'test_should_win_auction_if_is_the_only_bidder_above_starting_price': [], 'test_should_not_be_winning_auction_if_bids_below_starting_price': [], 'test_should_withdraw_the_only_bid': [], 'test_should_add_withdrawn_bids_ids_to_separate_list': [], 'test_should_not_be_winning_if_bid_lower_than_current_price': [], 'test_should_not_allow_placing_bids_for_ended_auction': [], 'test_should_emit_event_upon_overbid': [], 'BidderHasBeenOverbid': [106, 126], 'test_should_emit_winning_event_if_the_first_offer': [], 'WinningBidPlaced': [116, 125], 'test_should_emit_winning_if_overbids': [], 'test_should_emit_auction_ended': [], 'AuctionEnded': [135, 144], 'test_should_emit_event_with_none_winner_if_no_winners': [], 'test_should_raise_if_auction_has_not_been_ended': [], 'test_EndedAuction_PlacingBid_RaisesException': [], 'test_EndedAuction_Ending_RaisesException': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call_map,b,,i
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call_map,a,,m
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call_map,g,,e
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call_map,i,,n
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call_map,P,,l
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call_map,t,,e
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call_map,t,,e
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call_map,t,,e
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call_map,t,,e
"{'language': 'python', 'functions': ['bidder_id', 'amount', 'input_dto', 'test_loads_auction_using_id', 'test_makes_an_expected_bid', 'test_saves_auction', 'test_presents_output_dto'], 'classes': [], 'interfaces': [], 'imports': ['unittest.mock', 'pytest', 'foundation.value_objects', 'foundation.value_objects.factories', 'auctions.application.use_cases', 'auctions.application.use_cases.placing_bid', 'auctions.domain.entities'], 'calls': [['get_dollars', 20], ['PlacingBidInputDto', 25], ['PlacingBidOutputDto', 56]], 'call_map': {'bidder_id': [], 'amount': [], 'get_dollars': [20], 'input_dto': [], 'PlacingBidInputDto': [25], 'test_loads_auction_using_id': [], 'test_makes_an_expected_bid': [], 'test_saves_auction': [], 'test_presents_output_dto': [], 'PlacingBidOutputDto': [56]}}",call_map,P,,l
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",call_map,e,,x
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",call_map,i,,n
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",call_map,W,,i
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'input_dto', 'test_loads_auction_using_id', 'test_saves_auction_afterwards', 'test_calls_withdraw_bids_on_auction'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.use_cases', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities'], 'calls': [['WithdrawingBidsInputDto', 18]], 'call_map': {'exemplary_bids_ids': [], 'input_dto': [], 'WithdrawingBidsInputDto': [18], 'test_loads_auction_using_id': [], 'test_saves_auction_afterwards': [], 'test_calls_withdraw_bids_on_auction': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call_map,e,,x
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call_map,a,,u
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call_map,A,,u
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call_map,a,,u
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call_map,M,,o
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call_map,p,,l
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call_map,p,,l
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call_map,P,,l
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call_map,w,,i
"{'language': 'python', 'functions': ['exemplary_bids_ids', 'auction', 'auctions_repo_mock', 'placing_bid_output_boundary_mock', 'placing_bid_uc', 'withdrawing_bids_uc'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'unittest.mock', 'pytest', 'auctions.application.repositories', 'auctions.application.use_cases.placing_bid', 'auctions.application.use_cases.withdrawing_bids', 'auctions.domain.entities', 'auctions.tests.factories'], 'calls': [['AuctionFactory', 20], ['Mock', 25], ['Mock', 25], ['Mock', 30], ['PlacingBid', 35], ['WithdrawingBids', 40]], 'call_map': {'exemplary_bids_ids': [], 'auction': [], 'AuctionFactory': [20], 'auctions_repo_mock': [], 'Mock': [25, 25, 30], 'placing_bid_output_boundary_mock': [], 'placing_bid_uc': [], 'PlacingBid': [35], 'withdrawing_bids_uc': [], 'WithdrawingBids': [40]}}",call_map,W,,i
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['BeginningAuctionInputDto', 'BeginningAuction'], 'interfaces': [], 'imports': ['dataclasses', 'datetime', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.entities', 'auctions.domain.exceptions', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",call_map,e,,x
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['EndingAuctionInputDto', 'EndingAuction'], 'interfaces': [], 'imports': ['dataclasses', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['EndingAuctionInputDto', 'EndingAuction'], 'interfaces': [], 'imports': ['dataclasses', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'__init__': [], 'execute': []}}",call_map,e,,x
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",call_map,_,,_
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",call_map,i,,s
"{'language': 'python', 'functions': ['__init__', 'execute'], 'classes': ['WithdrawingBidsInputDto', 'WithdrawingBids'], 'interfaces': [], 'imports': ['dataclasses', 'typing', 'auctions.application.repositories'], 'calls': [['isinstance', 15]], 'call_map': {'__init__': [], 'isinstance': [15], 'execute': []}}",call_map,e,,x
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",call_map,p,,r
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",call_map,_,,_
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",call_map,e,,x
"{'language': 'python', 'functions': ['present', '__init__', 'execute'], 'classes': ['PlacingBidInputDto', 'PlacingBidOutputDto', 'PlacingBidOutputBoundary', 'PlacingBid'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'foundation.value_objects', 'auctions.application.repositories', 'auctions.domain.value_objects'], 'calls': [['PlacingBidOutputDto', 39]], 'call_map': {'present': [], '__init__': [], 'execute': [], 'PlacingBidOutputDto': [39]}}",call_map,P,,l
"{'language': 'python', 'functions': ['query', 'query'], 'classes': ['AuctionDto', 'GetSingleAuction', 'GetActiveAuctions'], 'interfaces': [], 'imports': ['abc', 'dataclasses', 'datetime', 'typing', 'foundation.value_objects'], 'calls': [], 'call_map': {'query': []}}",call_map,q,,u
"{'language': 'python', 'functions': ['get', 'save'], 'classes': ['AuctionsRepository'], 'interfaces': [], 'imports': ['abc', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'get': [], 'save': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['get', 'save'], 'classes': ['AuctionsRepository'], 'interfaces': [], 'imports': ['abc', 'auctions.domain.entities', 'auctions.domain.value_objects'], 'calls': [], 'call_map': {'get': [], 'save': []}}",call_map,s,,a
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,s,,e
"{'language': 'python', 'functions': [], 'classes': [], 'interfaces': [], 'imports': ['setuptools'], 'calls': [['setup', 3], ['find_packages', 6]], 'call_map': {'setup': [3], 'find_packages': [6]}}",call_map,f,,i
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",call_map,d,,e
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",call_map,T,,y
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",call_map,t,,y
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",call_map,s,,e
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",call_map,s,,e
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",call_map,s,,t
"{'language': 'python', 'functions': ['default', 'serialize_auction_dto', 'serialize_money', 'serialize_datetime'], 'classes': ['JSONEncoder'], 'interfaces': [], 'imports': ['datetime', 'functools', 'json', 'foundation.value_objects', 'auctions'], 'calls': [['TypeError', 13], ['type', 13], ['str', 27]], 'call_map': {'default': [], 'TypeError': [13], 'type': [13], 'serialize_auction_dto': [], 'serialize_money': [], 'str': [27], 'serialize_datetime': []}}",call_map,s,,e
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,g,,e
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,s,,t
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,f,,i
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,p,,u
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,d,,e
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,c,,o
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,f,,i
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,s,,e
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,s,,e
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,S,,e
"{'language': 'python', 'functions': ['get_user', 'find_user', 'put', 'delete', 'commit', 'find_role', 'session', 'setup'], 'classes': ['SaUserDatastore'], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_security', 'flask_security.datastore', 'sqlalchemy.orm', 'web_app_models'], 'calls': [['str', 16], ['Security', 44], ['SaUserDatastore', 44]], 'call_map': {'get_user': [], 'str': [16], 'find_user': [], 'put': [], 'delete': [], 'commit': [], 'find_role': [], 'session': [], 'setup': [], 'Security': [44], 'SaUserDatastore': [44]}}",call_map,S,,a
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call_map,c,,r
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call_map,F,,l
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call_map,b,,o
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call_map,F,,l
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call_map,A,,u
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call_map,t,,r
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call_map,t,,r
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call_map,h,,a
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call_map,a,,d
"{'language': 'python', 'functions': ['create_app', 'transaction_start', 'transaction_commit', 'add_cors_headers'], 'classes': [], 'interfaces': [], 'imports': ['typing', 'flask', 'flask_injector', 'sqlalchemy.engine', 'sqlalchemy.orm', 'main', 'main.modules', 'web_app.blueprints.auctions', 'web_app.blueprints.shipping', 'web_app.json_encoder', 'web_app.security'], 'calls': [['Flask', 20], ['bootstrap_app', 37], ['FlaskInjector', 38], ['AuctionsWeb', 38], ['hasattr', 53], ['security_setup', 67]], 'call_map': {'create_app': [], 'Flask': [20], 'bootstrap_app': [37], 'FlaskInjector': [38], 'AuctionsWeb': [38], 'transaction_start': [], 'transaction_commit': [], 'hasattr': [53], 'add_cors_headers': [], 'security_setup': [67]}}",call_map,s,,e
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call_map,T,,y
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call_map,g,,e
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call_map,c,,l
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call_map,s,,c
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call_map,c,,a
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call_map,d,,i
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call_map,a,,b
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call_map,m,,a
"{'language': 'python', 'functions': ['get_dto'], 'classes': ['BaseSchema'], 'interfaces': [], 'imports': ['typing', 'flask', 'marshmallow', 'marshmallow_dataclass', 'foundation.value_objects', 'web_app.serialization.fields'], 'calls': [['TypeVar', 11], ['class_schema', 19], ['schema_cls', 20], ['cast', 22], ['dict', 22], ['abort', 24], ['make_response', 24], ['jsonify', 24]], 'call_map': {'TypeVar': [11], 'get_dto': [], 'class_schema': [19], 'schema_cls': [20], 'cast': [22], 'dict': [22], 'abort': [24], 'make_response': [24], 'jsonify': [24]}}",call_map,j,,s
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",call_map,_,,s
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",call_map,s,,t
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",call_map,_,,d
"{'language': 'python', 'functions': ['_serialize', '_deserialize'], 'classes': ['Dollars'], 'interfaces': [], 'imports': ['marshmallow', 'foundation.value_objects.factories'], 'calls': [['str', 8], ['get_dollars', 12], ['str', 14]], 'call_map': {'_serialize': [], 'str': [8, 14], '_deserialize': [], 'get_dollars': [12]}}",call_map,g,,e
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call_map,i,,s
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call_map,a,,s
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call_map,r,,e
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call_map,R,,e
"{'language': 'python', 'functions': ['test_register_returns_details_with_auth_token', 'test_register_creates_customer', 'assert_customer_with_given_email_exists', 'registered_user', 'test_login'], 'classes': ['RegisteredUser'], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'pytest', 'sqlalchemy.engine', 'customer_relationship'], 'calls': [['isinstance', 15], ['isinstance', 16], ['assert_customer_with_given_email_exists', 26], ['RegisteredUser', 44]], 'call_map': {'test_register_returns_details_with_auth_token': [], 'isinstance': [15, 16], 'test_register_creates_customer': [], 'assert_customer_with_given_email_exists': [26], 'registered_user': [], 'RegisteredUser': [44], 'test_login': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call_map,e,,x
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call_map,i,,n
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call_map,t,,y
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call_map,l,,o
"{'language': 'python', 'functions': ['example_auction', 'test_return_single_auction', 'test_returns_list_of_auctions', 'logged_in_client', 'test_places_bid'], 'classes': ['BeginningAuctionInputDtoFactory', 'Meta'], 'interfaces': [], 'imports': ['factory', 'flask.testing', 'injector', 'pytest', 'foundation.value_objects.factories', 'auctions', 'main.modules'], 'calls': [['get_dollars', 18], ['int', 32], ['type', 39], ['type', 46]], 'call_map': {'get_dollars': [18], 'example_auction': [], 'int': [32], 'test_return_single_auction': [], 'type': [39, 46], 'test_returns_list_of_auctions': [], 'logged_in_client': [], 'test_places_bid': []}}",call_map,t,,e
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call_map,c,,o
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call_map,o,,p
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call_map,s,,t
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call_map,a,,p
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call_map,c,,r
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call_map,c,,o
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call_map,c,,l
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call_map,c,,o
"{'language': 'python', 'functions': ['config_path', 'app', 'container', 'client', 'connection'], 'classes': [], 'interfaces': [], 'imports': ['os', '_pytest.tmpdir', 'flask', 'injector', 'pytest', 'sqlalchemy.engine', 'web_app.app'], 'calls': [['open', 17], ['str', 32], ['create_app', 44], ['create_engine', 59]], 'call_map': {'config_path': [], 'open': [17], 'str': [32], 'app': [], 'create_app': [44], 'container': [], 'client': [], 'connection': [], 'create_engine': [59]}}",call_map,c,,r
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call_map,B,,l
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call_map,a,,b
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call_map,m,,a
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call_map,j,,s
"{'language': 'python', 'functions': ['get_next_package', 'ship_package'], 'classes': [], 'interfaces': [], 'imports': ['dataclasses', 'flask', 'flask_login', 'shipping'], 'calls': [['Blueprint', 13], ['abort', 20], ['make_response', 21], ['jsonify', 21], ['abort', 27], ['make_response', 33]], 'call_map': {'Blueprint': [13], 'get_next_package': [], 'abort': [20, 27], 'make_response': [21, 33], 'jsonify': [21], 'ship_package': []}}",call_map,s,,h
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,B,,l
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,p,,l
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,P,,l
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,a,,u
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,m,,a
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,j,,s
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,s,,i
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,p,,l
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,a,,b
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,g,,e
"{'language': 'python', 'functions': ['placing_bid_output_boundary', 'auctions_list', 'single_auction', 'place_bid', 'present'], 'classes': ['AuctionsWeb', 'PlacingBidPresenter'], 'interfaces': [], 'imports': ['flask', 'flask_injector', 'flask_login', 'injector', 'auctions', 'web_app.serialization.dto'], 'calls': [['Blueprint', 17], ['PlacingBidPresenter', 24], ['make_response', 29], ['jsonify', 29], ['make_response', 34], ['jsonify', 34], ['abort', 40], ['get_dto', 42], ['make_response', 57], ['jsonify', 57]], 'call_map': {'Blueprint': [17], 'placing_bid_output_boundary': [], 'PlacingBidPresenter': [24], 'auctions_list': [], 'make_response': [29, 34, 57], 'jsonify': [29, 34, 57], 'single_auction': [], 'place_bid': [], 'abort': [40], 'get_dto': [42], 'present': []}}",call_map,p,,r
